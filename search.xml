<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AJAX</title>
    <url>/2020/04/02/AJAX/</url>
    <content><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>三部曲：</p>
<ol>
<li>编写对应处理的Controller，返回消息或者字符串或者json格式的数据；</li>
<li>编写ajax请求<ol>
<li>url ：Controller请求</li>
<li>data ：键值对</li>
<li>success ：回调函数</li>
</ol>
</li>
<li>给Ajax绑定事件，点击，失去焦点，键盘弹起</li>
</ol>
<h2 id="注意-：使用JQuery需要导入JQuery文件。"><a href="#注意-：使用JQuery需要导入JQuery文件。" class="headerlink" title="==注意==：使用JQuery需要导入JQuery文件。"></a>==注意==：使用JQuery需要导入JQuery文件。</h2><h2 id="具体实现步骤"><a href="#具体实现步骤" class="headerlink" title="具体实现步骤"></a>具体实现步骤</h2><p>一 ，Controller部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/ajax"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/a1"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ajax</span><span class="params">(String name, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"admin"</span>.equals(name))&#123;</span><br><span class="line">            response.getWriter().print(<span class="string">"true"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().print(<span class="string">"false"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>二 ，ajax请求以及绑定事件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery-3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">a1</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//参数：</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//      url:待载入页面的url地址（必填）</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//      data：待发送Key/value参数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//      success：载入成功时回调函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//      status：请求返回的状态</span></span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">            url:<span class="string">"ajax/a1"</span>,</span></span><br><span class="line"><span class="javascript">            data:&#123;<span class="string">"name"</span>:$(<span class="string">"#txtName"</span>).val()&#125;,</span></span><br><span class="line"><span class="actionscript">            success:<span class="function"><span class="keyword">function</span> <span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    用户名：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txtName"</span> <span class="attr">onblur</span>=<span class="string">"a1()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>简洁的ajax请求方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function a1() &#123;</span><br><span class="line"></span><br><span class="line">     $.ajax(&quot;url&quot;,&quot;传入的参数&quot;,function(回来的参数)&#123;</span><br><span class="line">         </span><br><span class="line">       &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>ajax的请求方式</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. $.ajax() 默认是get请求。</span><br><span class="line">2. $.get()  get请求</span><br><span class="line">3. $.post() post请求</span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>数据交互</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>JQuery</title>
    <url>/2020/04/02/JQuery/</url>
    <content><![CDATA[<h1 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h1><p>先下载JQuery文件<br>在引入项目</p>
<p><code>注意</code>：<strong>在事件响应的function函数中，有个一this对象，这个this对象是当前正在响应事件的dom对象</strong></p>
<p>一，$</p>
<ol>
<li><p><strong>传入参数为【函数】时</strong> ：<br>在文档加载完成后执行这个函数。<br>相当于window.onload()=function(){}</p>
</li>
<li><p><strong>传入参数为【HTML字符串】时：</strong><br>会帮我们创建这个html标签对象</p>
</li>
<li><p><strong>传入参数为【选择器字符串】时：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;&quot;#id属性值&quot;&#125;	id选择器，根据id查询标签对象</span><br><span class="line">$&#123;&quot;标签名&quot;&#125;	标签名选择器，根据指定的标签名查询标签对象</span><br><span class="line">$&#123;&quot;.class&quot;&#125;		类型选择器，可以根据class属性查询标签对象</span><br></pre></td></tr></table></figure></li>
<li><p><strong>传入参数为【DOM对象】时：</strong><br>会把这个dom对象转换为JQuery对象</p>
</li>
</ol>
<hr>
<p>二，jQuery对象和dom对象区分  </p>
<ol>
<li><p>Dom对象  </p>
<ol start="2">
<li>通过getElementById()查询出来的标签对象是Dom对象</li>
<li>通过getElementByName()查询出来的标签对象是Dom对象</li>
<li>通过getElementByTagName()查询出来的标签对象是Dom对象</li>
<li>通过createElement()方法创建的对象，是Dom对象<br><code>DOM对象Alert出来的效果是：[object HTML标签名Element]</code>  </li>
</ol>
</li>
<li><p>JQuery对象  </p>
<ol start="7">
<li>通过JQuery提供的API创建的对象</li>
<li>通过JQuery包装的DOM对象</li>
<li>通过JQuery提供的API查询到的对象<br><code>JQuery对象Alert出来的效果的：[object，object]</code></li>
</ol>
</li>
<li><p>JQuery对象本质dom对象的数组+JQuery提供的一系列功能函数。</p>
</li>
<li><p>JQuery对象和DOM对象使用区别</p>
<pre><code>JQuery对象不能使用DOM对象的属性和方法 
DOM对象也不能使用JQuery对象的属性和方法</code></pre><a id="more"></a></li>
<li><p>DOM对象和JQuery对象互转<br>​    </p>
<ol>
<li><p>dom对象转化为JQuery对象    （*）</p>
<ol>
<li><p>先有dom对象</p>
</li>
<li><p>${DOM对象} 就可以转换成为JQuery对象</p>
<p>​</p>
<ol start="2">
<li>JQuery对象转化为dom对象（*）</li>
</ol>
<p>i，现有JQuery对象<br>ii，JQuery对象[下标]取出相应的dom对象</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>三，JQuery选择器（<strong>**</strong>重点）</p>
<ol>
<li><p>基础选择器（和css样式选择器差不多）<br> $(“”)</p>
</li>
<li><p>层级选择器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i，在给定祖先元素下匹配所有的后代元素</span><br><span class="line">	     $(&quot;ancestor descendant&quot;)</span><br><span class="line">ii，在给定的父元素下匹配所有的子元素</span><br><span class="line">	     $(&quot;parent &gt;child&quot;)</span><br><span class="line">iii，匹配所有紧接在prev元素后的next元素(同级)</span><br><span class="line">	     $(&quot;prev + next&quot;)</span><br><span class="line">iv，匹配prev元素之后的所有siblings元素（同级）</span><br><span class="line">	     $(&quot;prev ~ siblings&quot;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>过滤选择器<br> <strong>基本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i，选择第一个元素</span><br><span class="line">      $(&quot;xxx :first&quot;)</span><br><span class="line">i，选择最后一个元素</span><br><span class="line">      $(&quot;xxx :last&quot;)</span><br><span class="line">i，去除所有与给定选择器匹配的元素</span><br><span class="line">      $(&quot;xxx:not(select)&quot;)</span><br><span class="line">i，匹配所有索引值为偶数的元素，从0开始计数</span><br><span class="line">      $(&quot;xxx:even&quot;)</span><br><span class="line">i，匹配所有索引值为奇数的元素，从0开始计数</span><br><span class="line">      $(&quot;xxx:odd&quot;)	</span><br><span class="line">i，匹配一个给定索引值的元素</span><br><span class="line">      $(&quot;xxx:eq(index)&quot;)</span><br><span class="line">i，匹配所有大于给定索引值的元素</span><br><span class="line">      $(&quot;xxx:gt(index)&quot;)</span><br><span class="line">i，匹配所有小于给定索引值的元素</span><br><span class="line">      $(&quot;xxx:Lt(index)&quot;)</span><br><span class="line">i，匹配所有标题元素</span><br><span class="line">      $(&quot;:header&quot;)</span><br><span class="line">i，匹配所有正在执行动画的元素</span><br><span class="line">      $(&quot;:animated&quot;)</span><br></pre></td></tr></table></figure>

<pre><code>**内容**</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i，匹配包含给定文本的元素</span><br><span class="line">    $(&quot;xxx:contains(text)&quot;)</span><br><span class="line">i，匹配所有不包含子元素或者文本的空元素</span><br><span class="line">    $(&quot;xxx:empty&quot;)</span><br><span class="line">i，匹配含有子元素或者文本的元素</span><br><span class="line">    $(&quot;xxx:parent&quot;)</span><br><span class="line">i，匹配含有选择器所匹配的元素的元素</span><br><span class="line">    $(&quot;xxx:has(selector)&quot;)</span><br></pre></td></tr></table></figure>


</li>
</ol>
<pre><code>**属性**  </code></pre> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i，匹配包含给定属性的元素</span><br><span class="line">    $(&quot;xxx[attribute]&quot;)</span><br><span class="line">i，匹配给定的属性是某个特定值的元素</span><br><span class="line">    $(&quot;xxx[attribute&#x3D;value]&quot;)	</span><br><span class="line">i，匹配所有不含有指定的属性或者属性不等于特定值的元素</span><br><span class="line">    $(&quot;xxx[attribute!&#x3D;value]&quot;)</span><br><span class="line">i，匹配给定的属性是以某些值开始的元素</span><br><span class="line">    $(&quot;xxx[attribute^&#x3D;value]&quot;)</span><br><span class="line">i，匹配给定的属性是以某些值结尾的元素</span><br><span class="line">    $(&quot;xxx[attribute$&#x3D;value]&quot;)</span><br><span class="line">i，匹配给定的属性是以包含某些值的元素</span><br><span class="line">    $(&quot;xxx[attribute*&#x3D;value]&quot;)</span><br><span class="line">i，复合属性选择器，需要同时满足多个条件</span><br><span class="line">    $(&quot;[][][]&quot;)</span><br></pre></td></tr></table></figure>
<pre><code>**表单**  </code></pre> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i，匹配所有input，textarea，select和button源元素</span><br><span class="line">      :input</span><br><span class="line">i，匹配type是text类型</span><br><span class="line">      :text</span><br><span class="line">i，匹配type是password类型</span><br><span class="line">      :password</span><br><span class="line">i，匹配type是radio类型</span><br><span class="line">      :radio</span><br><span class="line">i，匹配type是checkbox类型</span><br><span class="line">      :checkbox</span><br><span class="line">i，匹配type是submit类型</span><br><span class="line">      :submit</span><br><span class="line">i，匹配type是reset类型（重置）</span><br><span class="line">      :reset</span><br><span class="line">i，匹配type是button类型</span><br><span class="line">      :button</span><br><span class="line">i，匹配type是file类型</span><br><span class="line">      :file</span><br><span class="line">i，匹配type是hidden类型(隐藏起来的)</span><br><span class="line">      :hidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i，匹配能用的表单元素</span><br><span class="line">      :enabled</span><br><span class="line">i，匹配不能用的表单元素</span><br><span class="line">      :disabled</span><br><span class="line">i，匹配已经选中的表单元素</span><br><span class="line">      :checked</span><br><span class="line">i，匹配所有选中的option元素</span><br><span class="line">		 :selected</span><br></pre></td></tr></table></figure>

<hr>
<p>四，<br>JQuery方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.val()可以操作表单项的value属性值，他可以设置和获取</span><br><span class="line">.each(function（alert（this））&#123;&#125;) 遍历元素的方法，this对象，就是当前遍历到的dom对象</span><br><span class="line">.css(&quot;属性名&quot;，属性值)，增加样式</span><br></pre></td></tr></table></figure>
<p>JQuery函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">confirm() 是JavaScript语言提供的一个确认提示框函数，传什么就提示什么，</span><br><span class="line">    当用户点击了确定，返回true，用户点击了取消，返回false</span><br><span class="line">find()	查找后代</span><br></pre></td></tr></table></figure>
<hr>
<p>五，<br>JQuery属性操作<br> <strong>不传参数是获取，传入参数是设置</strong>   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html()	它可以设置和获取起始标签和结束标签中的内容，和innerHTML一样  </span><br><span class="line">text()	它可以设置和获取起始标签和结束标签中的文本，和innerText一样  </span><br><span class="line">val()	它可以设置和获取表单项的value属性值	和value一样，还可以操作选中状态</span><br><span class="line">attr()	可以设置和获取属性的值，不推荐操作checked,readOnly,selected,disabked等等</span><br><span class="line">prop()	可以设置和获取属性的值，只推荐操作checked,readOnly,selected,disabked等等</span><br></pre></td></tr></table></figure>
<p>六，DOM增删改</p>
<pre><code>内部插入：
    appendTo()    a.appendTo(b)    把a插入到b子元素末尾，成为最后一个子元素
    prependTo()    a.prependTo(b)    把a插到b所有子元素前面，成为第一个子元素


外部插入：
    insertAfter()    a.insertfter(b)    得到ba
    insertBefore()    a.insertBefore(b)    得到ab

替换：
    replaceWith()    a.replaceWith(b)    用b替换掉a
    replaceAll()    a.replaceAll(b)    用a替换掉所有b

删除：
    remove()        a.remove()    删除a标签
    empty()        a.empty()        清空a标签里面的内容</code></pre><p>七，css样式操作</p>
<pre><code>addClass()    添加样式
removeClass()    删除样式
toggleClass()    有就删除，没有就添加样式
offset()        获取和设置元素的坐标
        设置
            JQuery对象.offset({
                top:100,
                left:50
            });</code></pre><p>八，JQuery动画</p>
<pre><code>基本动画
    show()    将隐藏的元素显示
    hide()    将可见的元素隐藏
    toggle()    可见就隐藏，隐藏就可见

        以上动画方法都可以添加参数：
            1，第一个参数是动画执行的时长，以毫秒为单位
            2，第二个参数是动画的回调函数（动画完成后自动调用的函数）    



淡入淡出动画

    fadeIn()        淡入
    fadeOut()        淡出
    fadeTo()        在指定时长内慢慢的将透明度修改到指定的值，0透明，1完全可见    
    fadeToggle()    淡入/淡出  切换</code></pre><p>九，JQuery事件操作<br>​<br>    $(function(){});<br>    和<br>    window.onload=function(){};<br>    的区别</p>
<pre><code>他们分别在什么时候触发？
1. JQuery的页面加载完成之后是浏览器的内核解析完页面的标签创建好DOM对象之后就会马上执行。
2. 原生js的页面加载完成以后，除了等浏览器的内核解析完页面的标签创建好DOM对象，还要等标签显示时需要的内容加载完成。


他们执行的次数？

    1，原生js的页面加载完成之后，只会执行最后一次的赋值函数
    2，JQuery的页面加载完成之后是全部把注册的function函数，依次顺序全部执行。</code></pre><p>​<br>    JQuery中其他事件处理方法</p>
<pre><code>click()        它可以绑定单机事件，以及触发单击事件
mouseover()    鼠标移入事件
mouseout()    鼠标移出事件
bind()        可以给元素一次性绑定一个或多个事件
one()        使用上跟bind一样，但是one方法绑定的事件只会响应一次
unbind()        跟bind方法相反的操作，接触事件的绑定
live()        也是用来绑定事件，它可以用来绑定选择器匹配的所有元素的事件，
        哪怕这个元素是后面动态创建出来的。</code></pre>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2020/04/06/JDBC/</url>
    <content><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p><code>使用JDBC操作数据库时，如果对数据库进行了更换，只需要替换：驱（jar包），具体驱动类，连接字符串，用户名（数据库名），密码（数据库密码）</code><br><code>先开的后关，后开的先关</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      if(rs !&#x3D;null)     rs.close();			</span><br><span class="line">if (stmt !&#x3D; null)  stmt.close();</span><br><span class="line">if (connection !&#x3D; null)  connection.close();</span><br></pre></td></tr></table></figure>

<h2 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1. JDBC"></a>1. JDBC</h2><p>Java DataBase Connectivity  可以为多种关系型数据库DBMS 提供统一的</p>
<h2 id="2-JDBC-API"><a href="#2-JDBC-API" class="headerlink" title="2.JDBC  API"></a>2.JDBC  API</h2><p>提供了各种操作接口   （接口，方法，类）</p>
<h2 id="3-JDBC-DriverManager"><a href="#3-JDBC-DriverManager" class="headerlink" title="3.JDBC DriverManager"></a>3.JDBC DriverManager</h2><p>管理不同的数据库驱动 （Oracle驱动/mysql驱动）</p>
<h2 id="4-各种数据库驱动"><a href="#4-各种数据库驱动" class="headerlink" title="4.各种数据库驱动"></a>4.各种数据库驱动</h2><p>相应的数据库厂商提供的（第三方公司提供，谁开发数据库谁提供 （jar包）  ），<br>    作用： 连接/直接操作数据库。</p>
<h2 id="5-数据库驱动"><a href="#5-数据库驱动" class="headerlink" title="5.数据库驱动"></a>5.数据库驱动</h2><ol>
<li>驱动jar包 </li>
<li>具体驱动类</li>
<li>连接字符串</li>
</ol>
<p><code>Oracle</code> </p>
<ol>
<li>ojdbc-x.jar</li>
<li>oracle.jdbc.OracleDriver.class</li>
<li>jdbc:oracle:thin:@localhost:1521:数据库实例名</li>
</ol>
<p><code>MySQL</code></p>
<ol>
<li>mysql-connector-java-x.jar        </li>
<li>com.mysql.jdbc.Driver.class            </li>
<li>jdbc:mysql://localhost:3306/数据库实例名</li>
</ol>
<p><code>SqlServer</code>                </p>
<ol>
<li>sql jdbc -x.jar            </li>
<li>com.microsoft.sqlserver.jdbc.SQLServerDriver.class  </li>
<li>jabc:microsoft:sqlserver:localhost:1433:databasename=数据库实例名<a id="more"></a>
<code>x对应于版本号</code></li>
</ol>
<p>##6.jar包下载</p>
<ol>
<li>去 maven库   ：  jar包 + mvn  网址 mvn/mvnrepositor开头</li>
<li>去Oracle官网下载</li>
<li>Oracle安装目录    下载Oracle自带</li>
</ol>
<h2 id="7-JDBC-API："><a href="#7-JDBC-API：" class="headerlink" title="7.  JDBC  API："></a>7.  JDBC  API：</h2><p>1.Java程序与数据库建立连接<br>2.Java程序给数据库发送sql语句<br>3.数据库返回处理结果<br>4.处理结果集 （增删改不需要处理 ，查询需要处理）</p>
<h2 id="8-JDBC-API通过以-下类-接口（方法）实现："><a href="#8-JDBC-API通过以-下类-接口（方法）实现：" class="headerlink" title="8.  JDBC API通过以 下类/接口（方法）实现："></a>8.  JDBC API通过以 下类/接口（方法）实现：</h2><pre><code>DriverManager    : 管理JDBC驱动
    |
    |
               \|/
Connection              ：实现连接    （通过DriverManager产生）  
    |
    |
               \|/
Statement 对象（PerparedStatement对象）     ：实现增删改查        （通过Connection产生）      Connection.createStatement()     Connection.perpareStatement()
CallableStatement  对象        ：调用数据库中 存储过程/存储函数     （通过Connection产生） Connection.perpareCall()
    |
    |
               \|/
Result    ：返回的结果集        （上面的 ment等产生）</code></pre><h2 id="9-JDBC访问数据库的具体步骤："><a href="#9-JDBC访问数据库的具体步骤：" class="headerlink" title="9.JDBC访问数据库的具体步骤："></a>9.JDBC访问数据库的具体步骤：</h2><ol>
<li>导入驱动程序（jar包），加载具体的驱动类（jar包中的那一个类）。</li>
</ol>
<ul>
<li>将jar包复制到项目中</li>
<li>增加到内路径中   <code>右击jar包 ---&gt;Build Path ---&gt; Add to Build Path</code></li>
<li>加载具体的驱动类      <code>oracle.jdbc---&gt;OracleDriver.class            java代码  ---&gt;Class.forName(&quot;oracle.jdbc.OracleDriver&quot;);</code></li>
</ul>
<ol start="2">
<li><p>与数据库建立连接<br>需要知道 :  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IP地址+端口号+数据库实例名 ---&gt;连接字符串      &#x2F;&#x2F;从很多数据库中定位数据库</span><br><span class="line">用户名 ：数据库名    scott		        &#x2F;&#x2F; 权限</span><br><span class="line">密码  ：数据库密码   tiger</span><br><span class="line">java代码---&gt;   Connection connection &#x3D;  DriverManager.getConnection(连接字符串，用户名，密码);    </span><br><span class="line">&#x2F;&#x2F;结束时关闭   </span><br><span class="line">if(connection!&#x3D;null) connection.close</span><br></pre></td></tr></table></figure>
</li>
<li><p>发送sql，执行sql<br><code>java代码---&gt;（增删改）</code></p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement stmt = connection.creatStatement();           </span><br><span class="line"><span class="comment">//结束时关闭   </span></span><br><span class="line"><span class="keyword">if</span>(stmt!=<span class="keyword">null</span>) stmt.close</span><br><span class="line"><span class="comment">//增加语句 </span></span><br><span class="line">String sql = <span class="string">"insert into bonus values('zs','jl',4,5)"</span>;    </span><br><span class="line"><span class="comment">//执行增加语句</span></span><br><span class="line">stmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">//返回值表示增删改了几条数据</span></span><br><span class="line"><span class="keyword">int</span> count = stmt.executeUpdate(sql);    </span><br><span class="line"><span class="keyword">if</span> (count&gt;<span class="number">0</span>) &#123;system.out.print(<span class="string">"操作成功"</span>);&#125;</span><br></pre></td></tr></table></figure>
<p><code>java代码---&gt;（查询）</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Statement stmt = connection.creatStatement();</span><br><span class="line"><span class="comment">//结束时关闭   </span></span><br><span class="line"><span class="keyword">if</span>(stmt!=<span class="keyword">null</span>)   stmt.close</span><br><span class="line"><span class="comment">//查询语句 </span></span><br><span class="line">String sql = <span class="string">"select * from student"</span>;</span><br><span class="line"><span class="comment">//执行  查询语句       </span></span><br><span class="line">stmt.executeQuery(sql);</span><br><span class="line">		     ResultSet rs = stmt.executeQuery(sql);  <span class="comment">//返回值表示增删改了几条数据  if (count&gt;0) 操作成功</span></span><br></pre></td></tr></table></figure>
<p><code>查询：</code><br>rs 默认指向结果集的前一行<br>rs.next();   ： //遍历<br>        1. 下移<br>        2. 判断下移之后的元素是否有数据<br>              有数据返回 true<br>               没有返回 false<br>rs.<br><code>rs.getXxx(字段名/位置):</code> 获取rs指向行的数据–&gt;getInt();   getString();   getDate(); </p>
<h2 id="10-PreparedStatement-与-Stetement-在使用时的区别"><a href="#10-PreparedStatement-与-Stetement-在使用时的区别" class="headerlink" title="10 PreparedStatement 与 Stetement 在使用时的区别"></a>10 PreparedStatement 与 Stetement 在使用时的区别</h2><ol>
<li>Statement :<br> sql<br> executeUpdate(sql)</li>
<li>PreparedStatement :<br> sql (可能存在占位符  ？）<br> 在创建PreparedStatement 对象时，将sql预编译 prepareStatement(sql)<br> setXxx()替换占位符 ？<br> execueteUpdate()</li>
</ol>
<p>推荐使用PreparedStatement:  </p>
<ol>
<li><p>编码更加简便(避免了字符串的拼接)  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name =<span class="string">"zs"</span>;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line">stmt:</span><br><span class="line">String sql = <span class="string">"insert into student    (stuno,stuname)    values   ('"</span>+name+<span class="string">"' , "</span>+age+<span class="string">")  "</span>;</span><br><span class="line">stmt.executeUpdate(sql);</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">pstmt:</span><br><span class="line">String sql =<span class="string">"insert into student    (stuno,stuname)    values(?,?)  "</span>;</span><br><span class="line">pstmt = connection.prepareStatement(sql);     <span class="comment">//预编译sql</span></span><br><span class="line">pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>,age);</span><br><span class="line">pstmt.executeUpdate();</span><br></pre></td></tr></table></figure>
</li>
<li><p>提高性能（因为有预编译操作，预编译只需要执行一次）<br>需要重复增加100条数（批量处理）  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stmt:</span><br><span class="line">String sql = <span class="string">"insert into student (stuno,stuname)  values  ('"</span>+name+<span class="string">"' , "</span>+age+<span class="string">")  "</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="number">100</span>)</span><br><span class="line">stmt.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">pstmt: </span><br><span class="line">String sql =<span class="string">"insert into student    (stuno,stuname)    values(?,?)  "</span>;</span><br><span class="line">pstmt = connection.prepareStatement(sql);     预编译sql</span><br><span class="line">pstmt.setString(<span class="number">1</span>,name);</span><br><span class="line">pstmt.setInt(<span class="number">2</span>,age);</span><br><span class="line"><span class="keyword">for</span>(<span class="number">100</span>)</span><br><span class="line">pstmt.executeUpdate();</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>3.安全（可以有效防止sql注入）<br>sql注入：将客户输入的内容 和 开发人员的sql混为一体<br>stmt：存在被sql注入的风险<br>（例如  输入  用户名：任意值 ‘ or 1=1 –<br>             密码：任意值  ）</p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>MVC</title>
    <url>/2020/04/06/MVC/</url>
    <content><![CDATA[<h1 id="MVC设计模型"><a href="#MVC设计模型" class="headerlink" title="MVC设计模型"></a>MVC设计模型</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M： Model，模型  一个功能 JavaBean实现</span><br><span class="line">V：View，视图   用于展示，以及与用户交互。html、css、js、jsp、jQuery等前段技术实现。</span><br><span class="line">C：Controller，控制器：接受（视图）请求，将请求跳转到模型进行处理，模型处理完毕后，再讲处理的结果返回给请求处。</span><br><span class="line"></span><br><span class="line">可以用jsp实现，但是一般建议用Servlet实现控制器。</span><br></pre></td></tr></table></figure>

<p><strong>jsp-&gt;Java(Servlet)-&gt;JSP</strong></p>
<p>步骤：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">View 发出请求 --&gt; Controller 选择 请求对应的模型  进行处理 --&gt; Model 使用特定的模型 进行数据处理 --&gt;返回处理结果给Controller--&gt;View 响应 （选择成功js页面进行显示）</span><br></pre></td></tr></table></figure>
<hr>
<p>一.  Servlet:<br>Java类必须符合一定的 规范：<br>      1. 必须继承 java.servlet.http.HttpServlet<br>      2. 重写其中的doGet()或doPost()方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">doGet() ：接受 并处理所有get提交方式的请求</span><br><span class="line">doPost() ：接受 并处理所有post提交方式的请求</span><br></pre></td></tr></table></figure>

<p>Servlet要想使用，必须配置<br>Servlet2.5 : web.xml<br>Servlet3.0 : @WebServlet</p>
<p><strong>Servlet2.0：</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户发出请求     --&gt;  </span><br><span class="line">被 servler-mapping中的 url-pattern 拦截   --&gt;   </span><br><span class="line">找servler-mapping中的 servler-name   --&gt; </span><br><span class="line">找servlet中的name   --&gt;  </span><br><span class="line">找servlet中的servlet-class--&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li><p>手动创建第一个Servlet </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编写一个类，继承HttpServlet </span><br><span class="line">重写doGet(),doPost()方法 </span><br><span class="line">编写web，xml中的servlet映射关系</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><p>借助Eclipse快速生成Servlet</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接新建Servlet即可</span><br><span class="line">Servlet2.5 与Servlet3.0 的区别：</span><br><span class="line">Servlet3.0不需要在web.xml中配置，但需要在Servlet类的定义处之上编写注解@WebServlet(url-pattern的值)</span><br><span class="line">匹配流程：请求地址 与@WebServlet中的值 进行匹配，如果匹配成功，则说明 请求的就是该注解所对应的类</span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>项目根目录：WebContent、src（所有的构建路径 ）<br>   例如：<br>    WebContent  中有一个文件index.jsp<br>    src中有一个Servlet.java<br>    如果：index.jsp中请求<a href="asd"> …..</a> ，则 寻找范围：即会在src根目录中找  也会在WebContent根目录中找<br>    如果：index.jsp中请求<a href="a/asd"> …..</a>，则 寻找范围： 先在src或WebContent根目录中找a目录，然后在a目录中找asd  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Web.xml 中的&#x2F;：代表项目根路径</span><br><span class="line">	http:&#x2F;&#x2F;localhost:8888&#x2F;Servlet30Project&#x2F;</span><br><span class="line">jsp中的&#x2F;：代表服务器根路径</span><br><span class="line">	http:&#x2F;&#x2F;localhost:8888&#x2F;</span><br></pre></td></tr></table></figure>
<p><code>构建路径和WebContent都是根路径</code></p>
<hr>
<p>##Servlet生命周期<br>加载：<br>初始化：init() ,该方法会在Servlet 被加载并实例化的以后 执行<br>服务：service()  -&gt;doGet()   doPost()<br>销毁：destroy() ,Servlet被系统回收时执行<br>卸载：<br>init() :<br>    默认第一次访问Servlet时会被执行<br>    可以修改为tomca启动时自动执行 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2.5版本     &lt;servlet&gt;</span><br><span class="line"> 			 &lt;servlet-name&gt;a&lt;&#x2F;servlet-name&gt;</span><br><span class="line">	  &lt;servlet-class&gt;      org.lanqiao.Servlet.WelcomeServlet	&lt;&#x2F;servlet-class&gt;</span><br><span class="line"> 			 &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">  </span><br><span class="line">		 &lt;&#x2F;servlet&gt;</span><br><span class="line">3.0版本</span><br><span class="line">	@WebServlet(value&#x3D;&quot;&#x2F;WelcomeServlet&quot;,loadOnStartup&#x3D;1)</span><br></pre></td></tr></table></figure>
<p>service()  -&gt;doGet()   doPost()  ：调用几次，执行几次<br>destroy():关闭tomcat服务器时，执行一次。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>三层架构</category>
      </categories>
      <tags>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/2020/04/04/JSON/</url>
    <content><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p><strong>是一种轻量级的数据交换格式，目前使用特别广泛</strong><br><strong>采用完全独立于标称语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得JSON成为理想的数据交换语言。</strong>  </p>
<p>  在js语言中，一切都是对象。因此，任何js支持通过json来表示，语法要求和语法格式如下:</p>
<ul>
<li>对象表示为键值对</li>
<li>数据由逗号分隔  </li>
<li>花括号保存对象  </li>
<li>方括号保存数组  </li>
</ul>
<p><strong>JSON键值对</strong>是用来保存js对象的一种方式，和js对象的写法也大同小异，键值对的健名写在前面，用双引号<code>&quot;&quot;</code>包裹，使用冒号<code>:</code>分隔，然后紧接着值：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot; : &quot;QinJiang&quot;&#125; </span><br><span class="line">&#123;&quot;age&quot;  : &quot;3&quot;&#125;</span><br><span class="line">&#123;&quot;sex&quot;  : &quot;男&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>可以理解为:<br>JSON是JS对象的字符串表示法，它使用文本表示一个JS对象的信息，本质是一个字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D; &#123;a:&#39;Hello&#39;,b:&#39;Wordl&#39;&#125;;  &#x2F;&#x2F;这是一个对象，注意健名也是可以使用引号包裹的  </span><br><span class="line">var json &#x3D; &#39;&#123;&quot;a&quot;:&quot;Hello&quot;,&quot;b&quot;:&quot;World&quot;&#125;&#39;;  &#x2F;&#x2F;这是一个json字符串，本质是一个字符串</span><br></pre></td></tr></table></figure>
<p><strong>JSON和JS对象互转</strong><br>要实现从JSON字符串转换为JS对象，使用JSON.parse()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D; JSON.parse(&#39;&#123;&quot;a&quot;:&quot;Hello&quot;,&quot;b&quot;:&quot;World&quot;&#125;&#39;)&#x2F;&#x2F;结果是&#123;a:&#39;Hello&#39;,b:&#39;World&#39;&#125;</span><br></pre></td></tr></table></figure>
<p>要实现从JS对象转化为JSON字符串，使用JSON.stringify()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var json &#x3D; JSON.stringify(&#123;a:&#39;Hello&#39;,b:&#39;World&#39;&#125;);&#x2F;&#x2F;结果是&#39;&#123;&quot;a&quot;:&quot;Hello&quot;,&quot;b&quot;:&quot;World&quot;&#125;&#39;</span><br></pre></td></tr></table></figure>
<h2 id="Java转换JSON"><a href="#Java转换JSON" class="headerlink" title="Java转换JSON"></a>Java转换JSON</h2><p><strong>普通javaBean对象转换成JSON</strong></p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    思考问题，我们正常返回他会走视图解析器，而json需要返回的是一个字符串;</span></span><br><span class="line"><span class="comment">//    市面上有很多的jar包可以实现这个功能，jackson，只需要一个简单的注解就可以实现了；</span></span><br><span class="line"><span class="comment">//  @ResponseBody,将服务器端返回的对象转换为json对象响应回去。</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/json1"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"><span class="comment">//        需要一个jackson的对象映射器，就是一个类，使用它可以直接将对象转换为json字符串；</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"秦疆1号"</span>,<span class="number">1</span>,<span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//       将java对象转换为json字符串；</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line"><span class="comment">//        由于使用了@ResponseBody注解，这里会将str以json格式的字符串返回，十分方便</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>List数组转换成JSON</strong>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/json3"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">"秦疆1"</span>,<span class="number">11</span>,<span class="string">"男"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">"秦疆2"</span>,<span class="number">22</span>,<span class="string">"男"</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">"秦疆3"</span>,<span class="number">33</span>,<span class="string">"男"</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="string">"秦疆4"</span>,<span class="number">44</span>,<span class="string">"男"</span>);</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user4);</span><br><span class="line">        String str = mapper.writeValueAsString(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>用了上面的方法会出现中文乱码，用下面方法可以解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping的produces属性可以解决</span><br><span class="line">produces：指定响应体返回类型和编码</span><br><span class="line">@RequestMapping(value&#x3D;&quot;&#x2F;json1&quot;,produces&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot;)</span><br></pre></td></tr></table></figure>
<p>有一种一劳永逸的方法：配置SpringMVC.xml文件</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mvc:annotation-driven &gt;</span><br><span class="line">       &lt;mvc:message-converters register-defaults=<span class="string">"true"</span>&gt;</span><br><span class="line">           &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span><br><span class="line">               &lt;constructor-arg value=<span class="string">"UTF-8"</span>/&gt;</span><br><span class="line">           &lt;/bean&gt;</span><br><span class="line">           &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span><br><span class="line">               &lt;property name=<span class="string">"objectMapper"</span>&gt;</span><br><span class="line">                   &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span><br><span class="line">                       &lt;property name=<span class="string">"failOnEmptyBeans"</span> value=<span class="string">"false"</span>/&gt;</span><br><span class="line">                   &lt;/bean&gt;</span><br><span class="line">               &lt;/property&gt;</span><br><span class="line">           &lt;/bean&gt;</span><br><span class="line">       &lt;/mvc:message-converters&gt;</span><br><span class="line">   &lt;/mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>
<p>返回时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/json5"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json5</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="comment">//        1，如何让他不返回时间戳，我们要关闭时间戳功能</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS,<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//        时间格式化问题，自定义日期格式对象</span></span><br><span class="line">        SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"><span class="comment">//        让mapper指定使劲按日期格式对象</span></span><br><span class="line">        mapper.setDateFormat(simpleDateFormat);</span><br><span class="line"><span class="comment">//        写一个日期对象</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">return</span> mapper.writeValueAsString(date);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据交互</category>
      </categories>
      <tags>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2020/04/06/Mybatis/</url>
    <content><![CDATA[<h1 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><p>MyBatis可以简化JDBC操作，实现数据的持久化（将数据存入数据库）<br><code>ORM：</code>Object Relational Mapping   ORM可以将对象和表一 一映射起来<br>person对象 - - -&gt; person表<br>ORM是概念，Mybatis是ORM的实现<br>ORM可以使得开发人员 像操作对象一样  操作数据库表。  </p>
<h2 id="2、MyBatis的环境搭建"><a href="#2、MyBatis的环境搭建" class="headerlink" title="2、MyBatis的环境搭建"></a>2、MyBatis的环境搭建</h2><ol>
<li>创建maven工程并导入坐标</li>
<li>创建实体类和dao的接口</li>
<li>创建Mybatis的主配置文件<pre><code>`SqlMapConifg.xml`</code></pre></li>
<li>创建映射配置文件  <code>InterfacePersonDao.xml</code></li>
</ol>
<h2 id="3、环境搭建的注意事项："><a href="#3、环境搭建的注意事项：" class="headerlink" title="3、环境搭建的注意事项："></a>3、环境搭建的注意事项：</h2><ol>
<li>创建InterfacePersonDao.xml  和InterfacePersonDao.java时 名称是为了和我们之前的知识保持一致<br>在Mybatis中  它把持久层的操作接口名称和映射文件也叫做：Mapper</li>
<li>mybatis的映射配置文件位置必须和dao接口的包结构相同。</li>
<li>映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名</li>
<li>映射配置文件的操作配置，id属性的取值必须是dao接口的方法名</li>
</ol>
<p><code>当我们遵从了第二，三，四点之后，我们在开发中就无需在写dao的实现类</code></p>
<h2 id="5、mybatis的入门案例："><a href="#5、mybatis的入门案例：" class="headerlink" title="5、mybatis的入门案例："></a>5、mybatis的入门案例：</h2><ol>
<li>读取配置文件</li>
<li>创建SqlSessionFactory工厂</li>
<li>创建SqlSession</li>
<li>创建Dao接口的代理对象</li>
<li>执行dao中的方法</li>
<li>释放资源  </li>
</ol>
<p><code>注意事项：</code><br>    不要忘记在映射配置中告知mybatis要封装到那个实体类中<br><code>配置的方式：</code>制定实体类的全限定类名</p>
<a id="more"></a>

<h2 id="6、mybatis基于注解的入门案例："><a href="#6、mybatis基于注解的入门案例：" class="headerlink" title="6、mybatis基于注解的入门案例："></a>6、mybatis基于注解的入门案例：</h2><p>把InterfacePersonDao.xml移除，在dao接口的方法上使用@Select注解，并指定sql语句，同时需要在SqlMapConfig.xml中使用mapper配置时，使用class属性指定dao接口的全限定类名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 读取配置文件</span></span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(<span class="string">"conf.xml"</span>);	</span><br><span class="line"><span class="comment">// 创建Sqlsessiontory工厂</span></span><br><span class="line">      <span class="comment">//创建工厂mybatis使用了构建者模式</span></span><br><span class="line">SqlSessionFactoryBuilder builder = <span class="keyword">new</span> SqlSessionFactoryBuilder();  </span><br><span class="line">      <span class="comment">//构建者模式：把对象的创建细节隐藏，使用者直接调用方法即可拿到对象  		</span></span><br><span class="line">SqlSessionFactory factory = builder.build(inputStream);			</span><br><span class="line"><span class="comment">// 使用工厂生产SqlSession对象</span></span><br><span class="line">      <span class="comment">//生产SqlSession使用了工厂模式	优势：解耦（降低类之间的依赖关系）</span></span><br><span class="line">SqlSession session = factory.openSession();			</span><br><span class="line"><span class="comment">// 使用SqlSession创建Dao接口的代理对象</span></span><br><span class="line">      <span class="comment">//创建Dao接口实现类使用了代理模式   优势：不修改源码的基础上对已有方法的增强</span></span><br><span class="line">InterfacePersonDao interfacePersonDao = session.getMapper(InterfacePersonDao<span class="class">.<span class="keyword">class</span>)</span>;	</span><br><span class="line"><span class="comment">// 使用代理对象执行方法</span></span><br><span class="line">List&lt;Person&gt; persons = interfacePersonDao.findAll();</span><br><span class="line"><span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">	System.out.println(person);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">session.close();</span><br><span class="line">inputStream.close();</span><br></pre></td></tr></table></figure>


<h2 id="7、自定义mybatis的分析："><a href="#7、自定义mybatis的分析：" class="headerlink" title="7、自定义mybatis的分析："></a>7、自定义mybatis的分析：</h2><p>mybatis在使用代理dao的方式实现增删改查时做了什么？<br>两件事：<br>第一：创建代理对象<br>第二：在代理对象中调用selectList</p>
<h2 id="8、开发mybatis程序："><a href="#8、开发mybatis程序：" class="headerlink" title="8、开发mybatis程序："></a>8、开发mybatis程序：</h2><ol>
<li><p>配置mybatis<br>conf.xml：配置数据库信息  和需要加载的映射文件</p>
</li>
<li><p>表  –  类<br>映射文件xxMapper.xml：增删改查标签 写sql语句</p>
</li>
<li><p>测试类：<br>session.selectOne(“需要查询的sql的namespace.id”,“sql的参数值”)</p>
</li>
</ol>
<hr>
<h2 id="一，基础方式的增删改查："><a href="#一，基础方式的增删改查：" class="headerlink" title="一，基础方式的增删改查："></a>一，基础方式的增删改查：</h2><p>mybatis约定：<br>输入参数和输出参数在形式上只能有一个  </p>
<p>如果输入参数是简单类型（8个基本类型+String）是可以使用任何占位符，#{xxx}<br>如果是对象类型，则必须是属性名#{属性名}</p>
<p><code>输出参数：</code>如果返回值类型是一个对象（如Person），则无论返回一个还是多个，在resultType都写org.zhaoning.entity.Person</p>
<p><code>注意事项：</code><br>a.  如果使用的事物提交方式为JDBC  则需要手动提交，即session.commit();<br>b.  所有的标签<code>&lt;select&gt;&lt;update&gt;</code>等，都必须有sql语句，但是sql参数值可选<br>    <figure class="highlight plain"><figcaption><span>* from student where id </span></figcaption><table><tr><td class="code"><pre><span class="line">sql有参数：session.insert(statement, 参数值)  </span><br><span class="line">sql没参数：session.insert(statement)</span><br><span class="line"></span><br><span class="line">## 二 ,  mapper 动态代理方式的crud（Mybatis接口开发）：</span><br><span class="line"></span><br><span class="line">&#96;原则：约定优于配置 &#96;</span><br><span class="line"></span><br><span class="line">硬编码方式</span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">abc.java</span><br><span class="line">Configuration conf &#x3D; new Configuration();</span><br><span class="line">conf.setName(myProject);</span><br></pre></td></tr></table></figure><br>配置形式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">abc.xml   </span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span> myProject<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>约定：默认值就是myProject</p>
<p>具体实现步骤：  </p>
<ol>
<li><p>基础环境:  </p>
<ul>
<li>mybatis.jar </li>
<li>ojdbc.jar  </li>
<li>conf.xml   </li>
<li>mapper.xml</li>
</ul>
</li>
<li><p>不同之处<br> 约定的目标：省略statement，即根据约定 直接可以定位出sql语句</p>
</li>
<li><p>接口中的方法必须遵循以下约定</p>
<ul>
<li><p>1.方法名和mapper.xm文件中标签的id值相同</p>
</li>
<li><p>2.方法的输入参数和mapper.xml文件中标签的parameterType类型一致</p>
</li>
<li><p>3.方法的返回值和mapper.xml文件中标签的resultType类型一致  </p>
<p>除了以上约定，要实现 <code>接口中的方法</code>  和<code>Mapper.xml 中sql标签</code>一 一对应，还需要以下1点：<br><code>1.namespace的值，就是 接口的全类名（接口---mapper.xml 一一对应）</code></p>
</li>
</ul>
</li>
<li><p>匹配的过程：（约定的过程）  </p>
<ol>
<li><p>根据 接口名 找到 mapper.xml文件  （根据的是 namespace = 接口全类名）</p>
</li>
<li><p>根据 接口的方法名  找到 mapper.xml 文件中的sql标签（方法名=sql标签的id值 、参数=sql标签的parameterType、返回值=sql标签的resultType）  </p>
<p>以上2点可以保证，当我们调用接口中的方法时，程序能自动定位到 某一个Mapper.xml文件中的sql标签</p>
<p><code>习惯：</code>sql映射文件（mapper.xml）和接口放在同一个包中  （注意修改conf.xml中加载mapper.xml文件的路径）</p>
</li>
</ol>
</li>
</ol>
<p>以上步骤：可以通过接口的方法–&gt;sql语句</p>
<ol start="5">
<li>执行：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PersonMapper personMapper = session.getMapper(PersonMapper<span class="class">.<span class="keyword">class</span>)</span>;  </span><br><span class="line">personMapper .方法();</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>通过session对象获取接口，在调用接口中的方法，程序会自动执行该方式对应的sql；</p>
<ol start="6">
<li><p>优化：</p>
<ol>
<li>可以将配置信息 单独放入db.properties 文件 ，然后再动态引入<br> db.properties:  <pre><code>k --- v</code></pre> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"bd.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
 引入之后，使用${key}  </li>
<li>别名<br> a、设置单个别名 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置别名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 单个别名 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"org.zhaoning.entity.Person"</span> <span class="attr">alias</span> = <span class="string">"Person"</span>/&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 多个别名   该包下都有一个别名  就是本身 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.zhaoning.entity"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="三、自定义Mybatis类型转换器"><a href="#三、自定义Mybatis类型转换器" class="headerlink" title="三、自定义Mybatis类型转换器"></a>三、自定义Mybatis类型转换器</h2>java  -  数据库（jdbc类型）<br>示例：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实体类Person ：  boolean     Sex</span><br><span class="line">			true:男</span><br><span class="line">			faluse:女</span><br><span class="line"></span><br><span class="line">表person： number	  sex</span><br><span class="line">		1：男</span><br><span class="line">		0：女</span><br></pre></td></tr></table></figure>
自定义类型转换器（boolean – number ）步骤：  </li>
</ol>
</li>
<li><p>创建转换器：需要实现TypeHandler接口  </p>
<pre><code>通过阅读源码发现，此接口有一个实现类BaseTypeHandler，因此 要实现类型转换有2种选择：  </code></pre><ul>
<li>实现接口TypeHandler</li>
<li>继承BaseTypeHandler</li>
</ul>
</li>
<li><p>配置<br> conf.xml<br>需要注意的问题：INTEGER</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> person(<span class="keyword">id</span>,<span class="keyword">name</span>,age,sex) <span class="keyword">values</span>(<span class="comment">#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;,#&#123;sex ,javaType =boolean,jdbcType=INTEGER &#125;)</span></span><br></pre></td></tr></table></figure>
<p><code>注意#{id}中存放的是 属性值，需要严格区分大小写。</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询   使用类型转换器 </span></span><br><span class="line"><span class="comment">1、 如果类中的属性和表中的字段类型能够合理识别  则可以使用 resultType，否则使用resultMap </span></span><br><span class="line"><span class="comment">2、 如果类中的数姓名  和表中的字段名能合理识别 （id - id） 则可以使用resultType，否则使用resultMap</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"person"</span> <span class="attr">id</span>=<span class="string">"personResult"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span> = <span class="string">"id"</span>  <span class="attr">column</span> = <span class="string">"id"</span>/&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"name"</span>  <span class="attr">column</span> = <span class="string">"name"</span>/&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"age"</span>  <span class="attr">column</span> = <span class="string">"age"</span>/&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"sex"</span>  <span class="attr">column</span> = <span class="string">"sex"</span> <span class="attr">javaType</span>=<span class="string">"boolean"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryPersonByConverter"</span> <span class="attr">resultMap</span>=<span class="string">"personResult"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line"> 		 select * from person where id =#&#123;id&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="四、输入参数：parameterType"><a href="#四、输入参数：parameterType" class="headerlink" title="四、输入参数：parameterType"></a>四、输入参数：parameterType</h2><ol>
<li>类型为 简单类型（8个基本类型+String）  </li>
</ol>
<ul>
<li>#{xxx}    语法上是任意值  </li>
<li>${value},其中的标识符只能是value</li>
</ul>
<ol start="2">
<li><p>两者不同：<br>#{}自动给String类型加上’’ (自动类型转换)<br>${}原样输出</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> <span class="keyword">id</span> =<span class="comment">#&#123;id&#125; </span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> person <span class="keyword">where</span> <span class="keyword">id</span> =<span class="string">'$&#123;value&#125;'</span></span><br></pre></td></tr></table></figure>

<p> 动态排序：<br>select  id, name,age from person order by ${value} asc<br>#{}可以防止SQL注入<br>${}不防止  </p>
</li>
<li><p>两者相同：<br>都可以 获取对象的值（嵌套类型对象）</p>
</li>
<li><p>模糊查询<br>方式一：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">person.setName("%w%")</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age  <span class="keyword">from</span> person <span class="keyword">where</span>  <span class="keyword">name</span> <span class="keyword">like</span> <span class="comment">#&#123;name&#125;</span></span><br></pre></td></tr></table></figure>
<p> 方式二：</p>
</li>
</ol>
<pre><code><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">person.setName("w")</span><br><span class="line">  	<span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,age  <span class="keyword">from</span> person <span class="keyword">where</span>  <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">'%$&#123;name&#125;%'</span></span><br></pre></td></tr></table></figure></code></pre><ol start="5">
<li>嵌套类型查询</li>
</ol>
<p>输入对象为HashMap：<br>where stuage = #{age}<br>用map中的key的值 匹配 占位符#{age}，如果匹配成功  就用map的value替换占位符</p>
<ol start="6">
<li>对象类型：<br>#{属性名}<br>#{属性名}<br>mybatis调用存储过程<br>1、查询某个年级的学生总数<br>输入：年级<br>输出：该年级的学生总数 </li>
</ol>
<h2 id="五、输出参数：resultType"><a href="#五、输出参数：resultType" class="headerlink" title="五、输出参数：resultType"></a>五、输出参数：resultType</h2><ol>
<li><p>简单类型（8个基本类型+string）</p>
</li>
<li><p>实体对象类型</p>
</li>
<li><p>实体对象类型的集合，但是resultType还是写 集合的元素类型</p>
</li>
<li><p>输出参数为HashMap<br> HashMap本身是一个集合，可以存放多个元素，但是根据提示发现，返回值为HashMap时，查询的结果只能是一个</p>
<p> 一个HashMap对应一个学生的多个元素（多个属性）【一个map，一个学生】<br>resultMap：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询   使用类型转换器 </span></span><br><span class="line"><span class="comment"> 1、 如果类中的属性和表中的字段类型能够合理识别  则可是使用 resultType，否则使用resultMap </span></span><br><span class="line"><span class="comment"> 2、 如果类中的数姓名  和表中的字段名能合理识别 （id - id） 则可以使用resultType，否则使用resultMap</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"person"</span> <span class="attr">id</span>=<span class="string">"personResult"</span>&gt;</span></span><br><span class="line"> 	  <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span> = <span class="string">"id"</span>  <span class="attr">column</span> = <span class="string">"id"</span>/&gt;</span></span><br><span class="line"> 	  <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"name"</span>  <span class="attr">column</span> = <span class="string">"name"</span>/&gt;</span></span><br><span class="line">     	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"age"</span>  <span class="attr">column</span> = <span class="string">"age"</span>/&gt;</span></span><br><span class="line">     	<span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span> = <span class="string">"sex"</span>  <span class="attr">column</span> = <span class="string">"sex"</span> <span class="attr">javaType</span>=<span class="string">"boolean"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryPersonByConverter"</span> <span class="attr">resultMap</span>=<span class="string">"personResult"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">  		 select * from person where id =#&#123;id&#125; </span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>注意：当属性名 和字段名不一致时，除了使用resultMap以外，还可以使用resultType+HashMap;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span> = <span class="string">"queryPerson"</span>  <span class="attr">parameterType</span> = <span class="string">"int "</span> <span class="attr">resultType</span> = <span class="string">"HashMap"</span>&gt;</span></span><br><span class="line">	selsect  id "Pid",name "Pname"  from person where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>注意：</code>如果有10个字段 ，一旦发现结果始终为默认值（0   0.0   null） 则可能是表的字段和类的属性名字写错</p>
<p><code>&lt;where&gt;</code>会自动处理第一个<code>&lt;if&gt;</code>标签中的and，但不会处理之后<if>中的and<br><code>&lt;foreach&gt;</code>  </if></p>
<p>查询学号为1 ， 2 的学生信息<br><code>select id,name  from person where id in(1,2)</code></p>
<p><code>&lt;foreach&gt;</code>迭代的类型：数组，对象数组，集合，属性（Grade类：List<Integer> ids）</Integer></p>
<p><code>数组：</code>无论编写代码时，传递的是什么参数名，在mappe.xml中  必须用array代替该数组</p>
<p><code>集合：</code>无论编写代码时，传递的是什么参数名，在mappe.xml中  必须用list代替该数组</p>
<p><code>对象数组：</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">person[] persons = &#123;person1,person2,person3&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryPersonByobj"</span> <span class="attr">parameterType</span>=<span class="string">"object[]"</span> <span class="attr">resultType</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">        select id,name,age from person</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"array!= null and array.length&gt;0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">" and id in ("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">item</span>=<span class="string">"person"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">                    #&#123;person.id&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>sql片段：<br>    java：方法<br>    数据库：存储过程，存储函数<br>    Mybatis：sql片段  </p>
<p>a、提取相似代码<br>b、引用</p>
<h2 id="六、关联查询："><a href="#六、关联查询：" class="headerlink" title="六、关联查询："></a>六、关联查询：</h2><ol>
<li>一对一 </li>
</ol>
<ul>
<li>业务扩展类<br>  <code>核心：</code>用resultType指定类的属性  包含 多表查询的所有字段</li>
<li>resultMap<ol>
<li>通过属性成员 将2个类建立起联系</li>
<li><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"per_card"</span> <span class="attr">type</span>=<span class="string">"person"</span>&gt;</span></span><br><span class="line">      			<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">     			 <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">     			 <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"age"</span> <span class="attr">column</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 一对一时，对象成员使用 association映射：javaType指定该属性的类型 --&gt;</span></span><br><span class="line">      	<span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"card"</span> <span class="attr">javaType</span>=<span class="string">"personcard"</span>&gt;</span></span><br><span class="line">      			<span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"cardid"</span> <span class="attr">column</span>=<span class="string">"cardid"</span>/&gt;</span></span><br><span class="line">     			 <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cardinfo"</span> <span class="attr">column</span>=<span class="string">"cardinfo"</span>/&gt;</span></span><br><span class="line">    		  <span class="tag">&lt;/<span class="name">association</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<ol start="2">
<li><p>一对多</p>
<p> <code>mybatis认为  多对一，多对多的本质就是 一对多的变化</code></p>
</li>
</ol>
<p>日志：<br>Log4j：log4j.jar</p>
<p>开启日志：<br>    如果不指定，mybatis就会根据以下顺序  寻找日志<br>    SLF4J  、 Apache Commons Logging 、Log4j 2、Log4j 、JDK logging</p>
<ol>
<li>引入依赖  log4.jar</li>
<li>开启依赖<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        开启日志--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  	 <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写配置日志输出文件<br>log4j.properties<br> 日志级别：<br> DEBUG&lt;INFO&lt;WARN&lt;ERROR<br>如果设置为info，则只显示 info及以上级别的信息；<br><code>建议：</code>在开发时设置debug，在运行时设置为info或以上  </li>
</ol>
<p>log4j.properties内容：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log4j.rootLogger&#x3D;DEBUG, stdout</span><br><span class="line">log4j.appender.stdout&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern&#x3D;%5p [%t] - %m%n</span><br></pre></td></tr></table></figure>
<p>可以通过日志信息，详细的阅读mybatis执行情况（观察mybatis实际执行sql语句  以及sql中的参数和返回结果）</p>
<h2 id="7、延迟加载："><a href="#7、延迟加载：" class="headerlink" title="7、延迟加载："></a>7、延迟加载：</h2><p><code>一对一、 一对多、多对一、多对多</code></p>
<ol>
<li><p>一对多：班级–学生<br>如果不采用延迟加载（即为立即加载），查询时会将 一和 多 都查询 ，班级，班级中的所有学生。<br>如果想要 暂时只查询1的一方 而 多的一方 先不查询  而是在需要的时候再去查询 –&gt;延迟加载  </p>
</li>
<li><p>一对一：学生，学生证</p>
<p> mybatis 中使用了延迟加载，需要先配置：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 开启日志--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启延迟加载--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关闭立即加载--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"aggressiveLazyLoading"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">   	<span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 如果增加了mapper.xml 要修改conf.xml配置文件  (将新增的mapper.xml加载进去）</p>
<p> 通过debug可以发现 ，如果程序只需要学生，则只向数据库发送了查询学生的sql，当我们后续需要用到学生证的时候，在第二次发送 查询学生证的sql</p>
</li>
<li><p>一对多：和一对一的延迟加载配置方法相同</p>
</li>
</ol>
<p><code>延迟加载的步骤：</code>  </p>
<ol>
<li>开启延迟加载conf.xml配置settings</li>
<li>配置mapper.xml<br> 写两个mapper.xml<br> 班级mapper.xml<br> 先查班级<br> 查询学生的sql通过 select属性指定，并且通过column指定外键<br> 学生mapper.xml    </li>
</ol>
<h2 id="八、查询缓存"><a href="#八、查询缓存" class="headerlink" title="八、查询缓存"></a>八、查询缓存</h2><h3 id="一、一级缓存"><a href="#一、一级缓存" class="headerlink" title="一、一级缓存"></a>一、一级缓存</h3><p>同一个SqlSession对象<br>Mybatis默认开启一级缓存，如果用同样的SqlSession对象查询相同的数据，则只会在第一次查询时 向数据库发送sq语句 放入到sqlsession中（作为缓存存在）</p>
<p>后续再次查询该对象时，则直接从缓存中查询该对象即可（即省略了数据库的访问）</p>
<h3 id="二、-二级缓存"><a href="#二、-二级缓存" class="headerlink" title="二、 二级缓存"></a>二、 二级缓存</h3><p>（默认没有开启二级缓存）<br>开启二级缓存：<br>    <code>&lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</code></p>
<p>在Mapper.xml文件中加<code>&lt;cache/&gt;</code><br>mybatis的二级缓存 是将对象放入硬盘<br>序列化：内存  硬盘<br>反序列化：硬盘  内存<br>准备缓存的对象，必须实现了序列化接口<br>触发将对象写入二级缓存的时机：sqlsession对象的close()方法  </p>
<p>mybatis自带二级缓存：同一个namespace生成的mapper对象<br><code>回顾</code>：namespace的值 就是接口的全类名（包名.类名），通过接口可以产生代理对象（personMapper对象）<br><code>结论：</code>namespace决定了personMapper对象的产生<br><code>最终结论：</code>只要产生的xxxMapper对象  来自于同一个namespace ，则这些对象 共享二级缓存。</p>
<h3 id="三、禁用二级缓存："><a href="#三、禁用二级缓存：" class="headerlink" title="三、禁用二级缓存："></a>三、禁用二级缓存：</h3><p><code>select中加 usecache = “false”</code><br><code>清理：</code></p>
<ol>
<li>commit();（执行增删改时，会清理掉缓存：设计原因  防止脏数据）<pre><code>在二级缓存中，commit()不能是查询自身的commit();  </code></pre> commit会清理一级缓存和二级缓存：但是 清理二级缓存时，不能是查询自身的commit；</li>
<li>在select标签中增加属性flushCache = “true”</li>
</ol>
<h3 id="四、三方提供的二级缓存"><a href="#四、三方提供的二级缓存" class="headerlink" title="四、三方提供的二级缓存:"></a>四、三方提供的二级缓存:</h3><p>echache    memcache<br>要想整合三方提供的缓存二级缓存（或自定义缓存），必须实现Cache接口<br>整合ehcache二级缓存：</p>
<ol>
<li><ul>
<li>Ehcache-core.jar<ul>
<li>mybatis-Ehcache.jar</li>
<li>slf4j-api.jar</li>
</ul>
</li>
</ul>
</li>
<li><p>编写ehcache配置文件  Ehcache.xml</p>
</li>
<li><p>开启EhCache二级缓存</p>
</li>
</ol>
<p>在xxxMaper.xml中开启<br><code>&lt;cache type=&quot;org.zhaoning.ehcache.Ehcache.xml&quot;&gt;
&lt;/cache&gt;</code></p>
<h2 id="九、逆向工程"><a href="#九、逆向工程" class="headerlink" title="九、逆向工程"></a>九、逆向工程</h2><p>表，类，接口，mapper.xml四者密切相关，因此 当知道一个的时候 其他三个应该可以自动生成。<br>表生成其他三个</p>
<p>实现步骤：<br>        1. mybatis-generator-core.jar ,mybaits.jar  ojdbc.jar<br>        2. 逆向工程的配置文件generator.xml<br>        3. 执行</p>
<p>mvn install:install-file -Dfile=C:\Users\asus\Desktop\ojdbc14.jar -DgroupId=com.oracle -DartifactId=ojdbc14 -Dversion=10.2.0.4.0 -Dpackaging=jar -DgeneratePom=true </p>
]]></content>
      <categories>
        <category>后端</category>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring</title>
    <url>/2020/04/04/Spring/</url>
    <content><![CDATA[<h1 id="1、Spring"><a href="#1、Spring" class="headerlink" title="1、Spring"></a>1、Spring</h1><h2 id="1-1-、简介"><a href="#1-1-、简介" class="headerlink" title="1.1 、简介"></a>1.1 、简介</h2><ul>
<li><p>官网：<a href="https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/</a></p>
</li>
<li><p>官方下载地址：<a href="https://repo.spring.io/release/org/springframework/spring" target="_blank" rel="noopener">http://repo.spring.io/release/org/springframework/spring</a></p>
</li>
<li><p>github地址：<a href="https://github.com/spring-projects/spring-framework" target="_blank" rel="noopener">https://github.com/spring-projects/spring-framework</a></p>
</li>
<li><p>依赖的jar包</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ul>
<h2 id="1-2、优点"><a href="#1-2、优点" class="headerlink" title="1.2、优点"></a>1.2、优点</h2><ul>
<li>Spring是一个开源的免费的框架（容器）</li>
<li>Spring是一个轻量级的，非入侵式的框架</li>
<li>==控制反转（IOC），面向切面编程（AOP）==</li>
<li>支持事物的处理，对框架整合的支持</li>
</ul>
<p><code>总结一句话：Spring就是一个轻量级的控制反转（IOC）和面向切面编程（AOP）的框架！</code></p>
<h2 id="1-3、组成"><a href="#1-3、组成" class="headerlink" title="1.3、组成"></a>1.3、组成</h2><p><img src="/2020/04/04/Spring/spring%E4%B8%83%E5%A4%A7%E6%A8%A1%E5%9D%97.png" alt="七大板块"></p>
<a id="more"></a>

<h2 id="1-4、拓展"><a href="#1-4、拓展" class="headerlink" title="1.4、拓展"></a>1.4、拓展</h2><p>现代化的java开发，说白了就是基于Spring开发</p>
<p><img src="/2020/04/04/Spring/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" alt="学习路线"></p>
<ul>
<li>Spring Boot<ul>
<li>一个快速开发的脚手架</li>
<li>基于SpringBoot可以快速的开发单个微服务</li>
<li>约定大于配置！</li>
</ul>
</li>
<li>Spring Cloud<ul>
<li>SpringCloud是基于SpringBoot实现的</li>
</ul>
</li>
</ul>
<p>因为现在大多数公司都在使用SpringBoot进行快速开发，学习SpringBoot的前提，需要完全掌握Spring及SpringMVC！</p>
<p>Spring弊端：发展了太久之后，违背了原来的理念！配置十分繁琐，人称：“配置地狱”</p>
<h1 id="2、IOC理论推导"><a href="#2、IOC理论推导" class="headerlink" title="2、IOC理论推导"></a>2、IOC理论推导</h1><p>原来步骤</p>
<ol>
<li><p>UserDao接口</p>
</li>
<li><p>UserDaoImpl实现类</p>
</li>
<li><p>UserService业务接口</p>
</li>
<li><p>UserServiceImpl业务实现类</p>
<p><img src="/2020/04/04/Spring/%E5%8F%8D%E8%BD%AC%E4%B9%8B%E5%89%8D.png" alt="反转之前"></p>
</li>
</ol>
<p>在我们之前的业务中，用户的需求可能会影响我们原来的代码，我们需要根据用户的需求去修改源代码，如果程序代码量十分大，修改一次的成本代价十分昂贵</p>
<p>我们使用一个Set接口实现。已经发生了革命性的变化！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">//利用set进行动态实现值的注入！</span></span><br><span class="line"><span class="function">Public <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>之前程序是主动创建对象！控制权在程序员手上</li>
<li>使用了set注入后，程序不在具有主动性，而是变成了被动的接收对象</li>
</ul>
<p>这种思想，从本质上解决了问题，我们程序员不用再去管理对象的创建了。系统的耦合性大大降低了，可以更加转转的在业务的实现上！这是IOC的原型</p>
<p><img src="/2020/04/04/Spring/set%E6%96%B9%E5%BC%8F%E5%8F%8D%E8%BD%AC%E4%B9%8B%E5%90%8E.png" alt="set方式反转之后"></p>
<h2 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h2><p><strong>控制反转IOC，是一种设计思想，DI（依赖注入）是实现IOC的一种方法</strong>，也有人认为DI只是IOC的另一种说法。没有IOC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建由程序自己控制，控制反转后，将对象的创建转移给第三方，控制反转就是获得依赖对象的方式反转了</p>
<p><img src="/2020/04/04/Spring/%E8%A7%A3%E8%80%A6%E5%8F%91%E5%B1%95.png" alt="解耦发展"></p>
<p>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的</p>
<p><strong>控制反转是哟中通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入</strong></p>
<p><img src="/2020/04/04/Spring/spring%E5%B7%A5%E4%BD%9C%E8%A7%86%E5%9B%BE.png" alt="spring工作视图"></p>
<h1 id="3、HelloSpring"><a href="#3、HelloSpring" class="headerlink" title="3、HelloSpring"></a>3、HelloSpring</h1><ol>
<li><p>引入需要的jar包</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.2.4.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写pojo实体类</p>
<p><code>重点是set方法</code></p>
</li>
<li><p>编写beans.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用Spring来创建对象，在Spring这些都称为Bean</span></span><br><span class="line"><span class="comment">    类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">    Hello hello = new Hello();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    id = 变量名</span></span><br><span class="line"><span class="comment">    class = new 的对象</span></span><br><span class="line"><span class="comment">    property 相当于给对象中的属性设置一个值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.zhaoning.pojo.Hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​</p>
<p>​</p>
<p>​</p>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取Spring的上下文对象！</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        Hello hello = (Hello)context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<h1 id="4依赖注入"><a href="#4依赖注入" class="headerlink" title="4依赖注入"></a>4依赖注入</h1><h2 id="4-1、构造函数注入："><a href="#4-1、构造函数注入：" class="headerlink" title="4.1、构造函数注入："></a>4.1、构造函数注入：</h2><p>​    1. 使用的标签：constructor-arg<br>​    2. 标签出现的位置：bean标签的内部<br>​    3. 标签中的属性:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type：用于指定要注入的数据类型，该数据类型也是构造函数中某个或某些参数的类型</span><br><span class="line">index：用于指定要注入的数据，给构造函数中指定索引位置的参数赋值，索引位置是从<span class="number">0</span>开始</span><br><span class="line">name：用于指定给构造函数中指定名称的参数赋值    （常用）</span><br><span class="line"> ===================以上三个用于指定给构造函数中那个参数赋值=======================</span><br><span class="line">value：用于提供基本类型和String类型的数据</span><br><span class="line">ref：用于指定其他的bean类型数据，它指的就是在spring的ioc容器中出现过的bean对象</span><br></pre></td></tr></table></figure>



<p>​    4.优势：<br>​        在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功</p>
<p>​    5.弊端：<br>​        改变了bean对象的实例化方式，是我们在创建对象时，如果用不到这些数据，也必须提供        </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"accountService"</span> <span class="attr">class</span>=<span class="string">"org.zhaoning.service.impl.AccountServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"age"</span>  <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4-2、set方式注入"><a href="#4-2、set方式注入" class="headerlink" title="4.2、set方式注入"></a>4.2、set方式注入</h2><p>（更常用的方式）</p>
<ul>
<li>依赖：bean对象的创建依赖于容器</li>
<li>注入：bean对象中的所有属性，由容器来注入</li>
</ul>
<ol>
<li><p>设计的标签：prpterty</p>
</li>
<li><p>出现的位置：bean标签内部</p>
</li>
<li><p>标签的属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name：用于指定注入时所调用的set方法名称</span><br><span class="line">value：用于提供基本类型和String类型的数据</span><br><span class="line">ref：用于指定其他的bean类型数据，它指的就是在spring的ioc容器中出现过的bean对象</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>优势：创建对象时没有明确的限制，可以直接使用默认构造函数</p>
</li>
<li><p>弊端：如果有某个成员必须有值，则获取对象有可能set方法没有执行。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"accountService2"</span> <span class="attr">class</span>=<span class="string">"org.zhaoning.service.impl.AccountServiceImpl2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span>  <span class="attr">value</span>=<span class="string">"21"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"birthday"</span> <span class="attr">ref</span>=<span class="string">"now"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="4-3、复杂类型的注入-集合类型的注入"><a href="#4-3、复杂类型的注入-集合类型的注入" class="headerlink" title="4.3、复杂类型的注入/集合类型的注入"></a>4.3、复杂类型的注入/集合类型的注入</h2><p>用于给List结构集合注入的标签：</p>
<ul>
<li>list</li>
<li>array</li>
<li>set</li>
</ul>
<p>用于给Map结构集合注入的标签：</p>
<ul>
<li><p>map</p>
</li>
<li><p>props</p>
<p>结构相同，标签可以互换</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"accountService3"</span> <span class="attr">class</span>=<span class="string">"org.zhaoning.service.impl.AccountServiceImpl3"</span>&gt;</span></span><br><span class="line"> 		<span class="comment">&lt;!-- 数组--&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myStrs"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- List--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- Set--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mySet"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  		<span class="comment">&lt;!-- Map--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myMap"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- Properties--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"myPros"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"driver"</span>&gt;</span>xxx <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"url"</span>&gt;</span>xxx <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"username"</span>&gt;</span>xxx <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>xx <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- null --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> = <span class="string">"wife"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">              </span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="4-4、拓展"><a href="#4-4、拓展" class="headerlink" title="4.4、拓展"></a>4.4、拓展</h2><p>p命名和c命名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span> id = "" class = ""  p:属性="" p:属性=""<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span> id = "" class = ""  c:属性="" c:属性=""<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意：使用p和c要导入xml约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:c="http://www.springframeword.org/schema/c"</span><br><span class="line">xmlns:p="http://www.springframeword.org/schema/p"</span><br></pre></td></tr></table></figure>



<h1 id="5、Spring配置"><a href="#5、Spring配置" class="headerlink" title="5、Spring配置"></a>5、Spring配置</h1><h2 id="5-1、Bean的配置"><a href="#5-1、Bean的配置" class="headerlink" title="5.1、Bean的配置"></a>5.1、Bean的配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用Spring来创建对象，在Spring这些都称为Bean</span></span><br><span class="line"><span class="comment">    类型 变量名 = new 类型();</span></span><br><span class="line"><span class="comment">    Hello hello = new Hello();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    id = 变量名</span></span><br><span class="line"><span class="comment">	name:别名，可以同时取多个别名</span></span><br><span class="line"><span class="comment">    class = new 的对象</span></span><br><span class="line"><span class="comment">    property 相当于给对象中的属性设置一个值</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"com.zhaoning.pojo.Hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="5-2、import"><a href="#5-2、import" class="headerlink" title="5.2、import"></a>5.2、import</h2><p>将多个配置文件导入合并为一个</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">improt</span>&gt;</span> resource = "beans1.xml"/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">improt</span>&gt;</span> resource = "beans2.xml"/&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">improt</span>&gt;</span> resource = "beans3.xml"/&gt;</span><br></pre></td></tr></table></figure>



<h1 id="6、bean的作用域"><a href="#6、bean的作用域" class="headerlink" title="6、bean的作用域"></a>6、bean的作用域</h1><p><img src="/2020/04/04/Spring/bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F.png" alt="bean的作用域"></p>
<p>##6.1 单例模式（Spring默认机制）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span>&gt;</span> id = "" class = ""  p:属性="" p:属性=""</span><br><span class="line">scope = "singleton"</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>![bean的单例对象]./Spring/bean的单例对象.png)</p>
<h2 id="6-2原型模式"><a href="#6-2原型模式" class="headerlink" title="6.2原型模式"></a>6.2原型模式</h2><p>每次从容器中get的时候，都会产生一个对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean&gt; id &#x3D; &quot;&quot; class &#x3D; &quot;&quot;  p:属性&#x3D;&quot;&quot; p:属性&#x3D;&quot;&quot;</span><br><span class="line">scope &#x3D; &quot;prototype&quot;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/04/Spring/bean%E7%9A%84%E5%A4%9A%E4%BE%8B%E5%AF%B9%E8%B1%A1.png" alt="bean的多例对象"></p>
<p>其余的request、session、application这些只能在web开发中使用到</p>
<h1 id="7、Bean的自动装配"><a href="#7、Bean的自动装配" class="headerlink" title="7、Bean的自动装配"></a>7、Bean的自动装配</h1><ul>
<li>自动装配时Spring满足bean依赖的一种方式</li>
<li>Spring会在上下文中自动寻找，并自动给bean装配属性</li>
</ul>
<p>子Spring中有三种装配的方式</p>
<ol>
<li>在xml中显示的配置</li>
<li>在java中显示配置</li>
<li>隐式的自动装配bean【重要】</li>
</ol>
<h2 id="7-1-byName自动装配"><a href="#7-1-byName自动装配" class="headerlink" title="7.1 byName自动装配"></a>7.1 byName自动装配</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">byName:会自动在容器上下文中查找和自己对象set方法后面的值对应的bean id</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"people"</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-2byType自动装配"><a href="#7-2byType自动装配" class="headerlink" title="7.2byType自动装配"></a>7.2byType自动装配</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">bytype:会自动在容器上下文中查找和自己对象属性类型相同的bean</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> = <span class="string">"people"</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>小结：</p>
<ul>
<li><p>byName的时候，需要保证所有bean的id唯一，并且这个bean需要和自动注入的属性的set方法的值一致</p>
</li>
<li><p>byType的时候，需要保证所有bean的class唯一，并且这个bean需要和自动注入的属性的类型一致</p>
<p>​</p>
</li>
</ul>
<h2 id="7-4使用注解实现自动装配"><a href="#7-4使用注解实现自动装配" class="headerlink" title="7.4使用注解实现自动装配"></a>7.4使用注解实现自动装配</h2><ol>
<li><p>导入约束：context约束</p>
</li>
<li><p>配置注解的支持：<a href="context:annotation-config/">context:annotation-config/</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>





</li>
</ol>
<p><strong>注解</strong></p>
<ol>
<li><p>@Autowired</p>
<p>直接在属性上使用即可，也可以在set方式上使用</p>
<p>使用Autowired我们可以不用编写set方法，前提是你这个自动装配的属性在IOC容器中存在，且符合byname</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Nullable	字段标记了这个注解，说明这个字段可以为null</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">people</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat1</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog1</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果@Autowired自动装配的环境比较复杂，自动装配无法通过一个注解完成的时候，我们可以使用@Qualifier(value=”xxx”)    去配合@Autowired使用，指定一个唯一的bean对象注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">@Qualifier(value&#x3D;&quot;cattt&quot;)</span><br><span class="line">private Cat cat;</span><br></pre></td></tr></table></figure>



<p>@resource注解和@Autowired实现的功能相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@resource</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@resource</span>(name=<span class="string">"doggg"</span>)</span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure>



<h1 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h1><ol>
<li>要保证aop的包导入了</li>
<li>使用注解需要导入context约束，增加注解的支持</li>
</ol>
<p><strong>注解</strong></p>
<ul>
<li><p>@Component：组件，放在类上，说明这个类被Spring管理了，就是bean</p>
<ul>
<li><p>dao  【@Repository】</p>
</li>
<li><p>service 【@Service】</p>
</li>
<li><p>controller 【@Controller】</p>
<p>这四个注解功能相同，将某个类</p>
</li>
</ul>
</li>
<li><p>@Value(“属性名”)：放在属性或set方法上，相当于<code>&lt;property name=&quot;name&quot; value=&quot;赵凝&quot;&gt;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Value("赵凝")</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"赵凝"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@Scope(“singleton”)  单例</p>
<p>@Scope(“prototype “)  多例</p>
</li>
</ul>
<ol start="4">
<li>自动装配</li>
<li>作用域</li>
<li>小结：<ul>
<li>xml与注解<ul>
<li>xml更加万能，是用于任何场合！维护简单方便</li>
<li>注解不是自己类使用不了，维护相对复杂</li>
</ul>
</li>
<li>xml与注解最佳实践：<ul>
<li>xml用来管理bean</li>
<li>注解只负责完成属性的注入</li>
<li>我们在使用的过程中，只需要注意一个问题：必须让注解生效，开启注解的支持</li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC</title>
    <url>/2020/04/04/SpringMVC/</url>
    <content><![CDATA[<h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MVC</span><br><span class="line">	M：model	        模型 （JavaBean）</span><br><span class="line">	V：view		    视图（jsp html，css，js）</span><br><span class="line">	C：Controller	控制器（Servlet）</span><br></pre></td></tr></table></figure>

<p>入门程序的需求：</p>
<ol>
<li><p>需要搭建开发的环境</p>
<ol>
<li>创建maven项目，选择web骨架<ol start="2">
<li>在main文件夹下面创建java和resources文件夹</li>
</ol>
</li>
<li>版本控制   在pom文件中 写在<properties>标签中<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4. 在web.xml中 加入</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;xml</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">   &lt;servlet-name&gt;dispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">   &lt;&#x2F;servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">   &lt;servlet-name&gt;dispatcherServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        		&lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure></code></pre></properties></li>
</ol>
</li>
</ol>
<pre><code>5. 添加maven依赖

     <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br></pre></td></tr></table></figure>

6. 在resources文件夹下创建configuration.xml</code></pre><a id="more"></a>
<ol start="2">
<li>编写入门的程序        <ol>
<li>在Java文件夹下创建一个控制器类</li>
<li>将类交给ioc容器，在springMVC.xml中添加命名空间<br>开启注解扫描（&lt;context:component-scan base-package=”com.zhaoning”&gt;）</li>
<li>在控制器类上加注解@Controller（将类交给了ioc容器）<br>在方法上加注解@RequestMapping(path=”/hello”)（请求映射）</li>
<li>让springMVC.xml被加载<br>放在<servlet>标签中<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">		param-name&gt;contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springMvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br></pre></td></tr></table></figure></servlet></li>
<li>控制器类的方法返回什么字符串，就创建什么名字的jsp文件（自动跳转）<br>在WEB-INF文件夹下创建pages文件夹<pre><code>在pges文件夹下创建以方法返回的字符串为名字的jsp文件</code></pre></li>
<li>试图解析器对象（实现自动跳转）id无所谓<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"> 			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/pages/"</span>/&gt;</span> 文件所在的目录</span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span>文件的后缀名</span><br><span class="line">			<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!--    开启SpringMVC框架注解的支持--&gt;</span>（自动加载处理器适配器，处理器映射器）</span><br><span class="line">			 <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ol>
<hr>
<p>一，<em>springMVC注解</em></p>
<ol>
<li><p>@RequestMapping(path=”/“,method=”RequestMethod.POST”)</p>
<p><code>作用</code>：用于建立请求url和处理请求之间的对应关系。可以放在方法上，也可以放在类上</p>
<p><code>请求地址</code>：类上的路径/方法上的路径<br>​        </p>
<pre><code>    `属性`：

value：和path一样（只有一个属性时，value可以省略）

method：允许什么样的请求方式

params：用于指定限制请求参数的条件，支持简单的表达式，要求请求参数的key和value必须配置一样

            例如：
                params={&quot;accountName&quot;} 表示请求参数必须有accountName
                params={&quot;moeny!100&quot;}表示请求参数moneny不等于100 

            headers：用于指定限制请求消息头的条件</code></pre></li>
<li><p>@RequestParam</p>
<p> <code>作用</code>：如果传入参数和方法形参名字不相同，可以用此方法解决放在形参前面<br> ​    </p>
<pre><code>`属性`：

        value：和name一样 name=(&quot;传入参数的name值&quot;)

        required：默认是true，如果写了这个注解，就要按此注解的形式传参数    </code></pre></li>
<li><p>@RequestBody<br>​<br><code>作用</code>：获取请求体</p>
<pre><code> 放在形参前面    

@RequestBody String body</code></pre></li>
<li><p>@PathVariable<br> ​<br>  <code>作用</code>：用于绑定url中的占位符</p>
<pre><code>放在形参前面

        @RequestMapping(&quot;/xxx/{占位符}&quot;)

        @PathVariable(value=&quot;占位符&quot;) 

`属性`：

        value：用于指定url中占位符名称

        requirde：是否必须提供占位符</code></pre></li>
<li><p>@RequestHeader<br>（用的不多）</p>
<pre><code>`作用`：
    用于获取请求头 , 放在形参前面

`属性`：
    value：要获取的请求头名称</code></pre></li>
<li><p>@CookieValue<br> （用的不多）<br><code>作用</code>：</p>
<pre><code>用于获取指定的cookie名称的值</code></pre><p> 放在形参前面</p>
<p> <code>属性</code> ：</p>
<pre><code>value：指定cookie的名称</code></pre></li>
<li><p>@ModelAttribute<br>​<br> <code>作用</code>：</p>
<pre><code>出现再方法上，表示当前方法会在控制器的方法执行之前，先执行。
出现再参数上，获取指定的数据给参数赋值。</code></pre><p> <code>属性</code>：    </p>
<pre><code>value：用于获取数据的key，可以是pojo的属性名，也可以是map结构的key</code></pre></li>
</ol>
<ol start="8">
<li><p>@SessionAttribute</p>
<p> <code>作用</code>：</p>
<pre><code>    用于多次执行控制器方法间的参数共享

`属性`：
    value：用于指定存入的属性名称
    type：用于指定存入的数据类型

在类名上面</code></pre></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//把key对应的值存入session域中</span></span><br><span class="line"><span class="meta">@SessionAttribute</span>(values=&#123;<span class="string">"key"</span>&#125;)</span><br><span class="line"></span><br><span class="line">方法名（Model  model）&#123;</span><br><span class="line">	<span class="comment">//底层会存储到request域对象中</span></span><br><span class="line">	model.addAttribute(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ModelMap modeMap</span><br><span class="line">	<span class="comment">//取值</span></span><br><span class="line">	modeMap.get(<span class="string">"key"</span>);</span><br><span class="line">		</span><br><span class="line">	SessionStatus status</span><br><span class="line">	<span class="comment">//删除session中的值</span></span><br><span class="line">	status.setComplete();</span><br></pre></td></tr></table></figure>

<hr>
<p>二，<em>请求参数的绑定</em></p>
<ol>
<li><p>请求参数的绑定说明</p>
<ol start="2">
<li><p>绑定机制</p>
<ol>
<li>表单提交的数据都是k=v格式的，username=haha&amp;password=adf</li>
<li>SpringMVC的参数绑定过程是把表单提交的请求参数，作为控制器中方法的参数进行绑定的</li>
<li>要求：提交表单的name和参数的名称是相同的</li>
</ol>
</li>
<li><p>支持的数据类型<br>1.基本数据类型<br> 2.实体类型（JavaBean）<br> 3.集合数据类型（List，Map集合等）</p>
</li>
</ol>
</li>
<li><p>基本数据类型和字符串类型</p>
<ol start="5">
<li>提交表单的name和参数的名称是相同的</li>
<li>区分大小写</li>
<li>实体类型（JavaBean）<ol>
<li>提交表单的name和JavaBean中的属性名称要一致</li>
<li>如果一个JavaBean类中包含其他的引用类型，那么表单的name属性要编写成：对象.属性<br>例如：address.name</li>
</ol>
</li>
<li>集合数据类型（List，Map集合等）<br>list[0].xxx<br>  map[“xxx”].xxx<br>​    </li>
</ol>
</li>
</ol>
<p>解决中文乱码的过滤器：</p>
<p>1，在web.xml中加入  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">					 <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">		 		 <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>characterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p>三，<em>自定义类型转换器</em></p>
<pre><code>    在springMVC.xml中配置
    &lt;bean id=&quot;conversionService1&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;
            &lt;property name=&quot;converters&quot;&gt;
                    &lt;set&gt;
                            &lt;bean class=&quot;自己写的类型转换器&quot;&gt;&lt;/bean&gt;
                    &lt;/set&gt;
            &lt;/property&gt;
    &lt;/bean&gt;
&lt;!--    开启SpringMVC框架注解的支持--&gt;
    &lt;mvc:annotation-driven conversion-service=&quot;conversionService1&quot;/&gt;</code></pre><hr>
<p>四，<em>响应</em></p>
<ol>
<li><p><strong>返回值是String类型</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法名（Model  model）&#123;</span><br><span class="line">			&#x2F;&#x2F;底层会存储到request域对象中</span><br><span class="line">			model.addAttribute(&quot;key&quot;,&quot;value&quot;);</span><br><span class="line">		return &quot;字符串&quot;;</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>返回值是void类型</strong></p>
<p>   请求转发或者重定向或直接响应</p>
<pre><code>直接响应要防止中文乱码</code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">response.getWriter().print(<span class="string">"hello"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>返回值是ModelAndView类型</strong></p>
<ol start="4">
<li>要新建一个ModelAndView对象<br><code>ModelAndView mv = newModelAndView();</code></li>
<li>把数据存到ModelAndView对象中<br><code>mv.addObject(&quot;key&quot;,value);</code></li>
<li>跳转到那个页面<br><code>mv.setViewName(&quot;字符串&quot;)；</code></li>
<li>阻止下面代码执行<br><code>return mv;</code><br>​            </li>
</ol>
</li>
<li><p><strong>使用关键字的方式进行转发或者重定向</strong><br>（用的不多）</p>
<p> 使用了关键字，就不能使用视图解析器，所以要自己配置好要访问的路径</p>
<pre><code>1. 请求转发
    return &quot;forward:/WEB-INF/pages/success.jsp&quot;;</code></pre></li>
</ol>
<pre><code>     2. 重定向
return &quot;redirect:/index.jsp&quot;</code></pre><p>  ​</p>
<ol start="9">
<li><p><strong>响应之防止过滤静态资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mvc:resources location=<span class="string">"/css/"</span> mapping=<span class="string">"/css/**"</span>&gt;</span><br><span class="line">&lt;mvc:resources location=<span class="string">"/js/"</span> mapping=<span class="string">"/js/**"</span>&gt;</span><br><span class="line">&lt;mvc:resources location=<span class="string">"/images/"</span> mapping=<span class="string">"/images/**"</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>响应之Ajax请求</p>
<ol start="7">
<li><p>客户端发送Ajax请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">     $.ajax(&#123;</span><br><span class="line">          url: <span class="string">"ajax/a1"</span>,</span><br><span class="line">        <span class="comment">//发送给后端的数据类型</span></span><br><span class="line">          contentType:<span class="string">"application/json;charset=UTF-8"</span>,</span><br><span class="line">        <span class="comment">//发送给后端的数据</span></span><br><span class="line">          data: <span class="string">'&#123;"name":"gaag","age":"10","sex":"nan"&#125;'</span>,</span><br><span class="line">        <span class="comment">//接收后端用什么数据类型（可以不写）</span></span><br><span class="line">          dataType: <span class="string">"json"</span>,</span><br><span class="line">        <span class="comment">//请求方式（可以直接在前面定义）</span></span><br><span class="line">          type: <span class="string">"post"</span>,</span><br><span class="line">        <span class="comment">//这个data是后端传回来的数据</span></span><br><span class="line">          success: function (data) &#123;</span><br><span class="line">              console.log(data);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li>
<li><p>后端响应</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Controller</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"/ajax"</span>)</span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AjaxController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/a1"</span>)</span><br><span class="line">   <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">User <span class="title">ajax</span><span class="params">(@RequestBody String body)</span> </span>&#123;</span><br><span class="line">       System.out.println(body);</span><br><span class="line">       User user = <span class="keyword">new</span> User(<span class="string">"asd"</span>,<span class="number">1</span>,<span class="string">"男"</span>);</span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<hr>
<h2 id="SpringMVC文件上传"><a href="#SpringMVC文件上传" class="headerlink" title="SpringMVC文件上传"></a>SpringMVC文件上传</h2><ol>
<li><p>编写前端请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">选择文件：&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;upload&quot;&#x2F;&gt;&lt;br&gt;</span><br><span class="line">       &lt;input  type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件解析器（在springMVC.xml中配置）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!--    配置文件解析器对象--&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"multipartResolver"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">   &lt;mvc:resources location=<span class="string">"/js/"</span> mapping=<span class="string">"/js/**"</span>/&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>编写后端controller代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/fileupload"</span>)</span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">fileupload</span><span class="params">(HttpServletRequest request, MultipartFile upload)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">       <span class="comment">//上传的位置</span></span><br><span class="line">       String path = request.getSession().getServletContext().getRealPath(<span class="string">"/upload"</span>);</span><br><span class="line">       <span class="comment">//判断该路径是否存在</span></span><br><span class="line">       File file = <span class="keyword">new</span> File(path);</span><br><span class="line">       <span class="keyword">if</span>(!file.exists())</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//创建该文件夹</span></span><br><span class="line">        file.mkdirs();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//获取上传文件的名称</span></span><br><span class="line">       String filename = upload.getOriginalFilename();</span><br><span class="line">       <span class="comment">//把文件的名称设置唯一值</span></span><br><span class="line">       String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">       filename = uuid + <span class="string">"_"</span>+ filename;</span><br><span class="line">       upload.transferTo(<span class="keyword">new</span> File(path,filename));</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<hr>
<h2 id="文件上传之跨服务器"><a href="#文件上传之跨服务器" class="headerlink" title="文件上传之跨服务器"></a>文件上传之跨服务器</h2><ol>
<li><p>需要准备两个服务器</p>
<p>一个是部署项目用的，一个是存放文件的</p>
</li>
<li><p>配置文件解析器（在springMVC.xml中配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--    配置文件解析器对象--&gt;</span><br><span class="line">   &lt;bean id=<span class="string">"multipartResolver"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写前端代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">选择文件：&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;upload&quot;&#x2F;&gt;&lt;br&gt;</span><br><span class="line">       &lt;input  type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
<li><p>编写后端代码</p>
<ol>
<li>首先需要导入jar包</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jersery-core.jar</span><br><span class="line">jersey-client.jar</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>controlle代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/fileupload"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fileupload</span><span class="params">( MultipartFile upload)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//定义上传文件服务器路径</span></span><br><span class="line">      String path = <span class="string">"http://localhost:9090/uploads/"</span>;</span><br><span class="line">    <span class="comment">//说明上传文件项</span></span><br><span class="line">    <span class="comment">//获取上传文件的名称</span></span><br><span class="line">      String filename = upload.getOriginalFilename();</span><br><span class="line">        <span class="comment">//把文件的名称设置唯一值</span></span><br><span class="line">      String uuid = UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">      filename = uuid + <span class="string">"_"</span>+ filename;</span><br><span class="line">      <span class="comment">//跨服务器上传</span></span><br><span class="line">      <span class="comment">//创建客户端</span></span><br><span class="line">      Client client = Client.create();</span><br><span class="line">      <span class="comment">//和图片服务器进行连接</span></span><br><span class="line">      WebResource webResource = client.resource(path+filename);</span><br><span class="line">   		webResource.put(upload.getBytes());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/04/04/SpringMVC/%E7%AC%94%E8%AE%B0%E6%88%AA%E5%9B%BE/SpringMVC%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0.png" alt></p>
</li>
</ol>
<p><img src="/2020/04/04/SpringMVC/%E7%AC%94%E8%AE%B0%E6%88%AA%E5%9B%BE/%E8%B7%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.png" alt></p>
</li>
</ol>
<hr>
<h2 id="SpringMVC的异常处理"><a href="#SpringMVC的异常处理" class="headerlink" title="SpringMVC的异常处理"></a>SpringMVC的异常处理</h2><p><img src="/2020/04/04/SpringMVC/E:%5C%E7%AC%94%E8%AE%B0%E6%88%AA%E5%9B%BE%5CSpringMVC%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.png" alt="异常处理"></p>
<ol>
<li><p>编写自定义异常类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">syserror</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="comment">//存储提示信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">syserror</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写异常处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要继承HandlerExceptionResolver接口以及实现其一个方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        syserror s = <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//类型转换   e就是上一个程序抛出的异常</span></span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> syserror)</span><br><span class="line">        &#123;</span><br><span class="line">            s = (syserror)e;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            s = <span class="keyword">new</span> syserror(<span class="string">"维护中"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建ModelAndView对象</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">      <span class="comment">//向ModelAndView对象中存入错误信息</span></span><br><span class="line">        mv.addObject(<span class="string">"errorMsg"</span>,s.getMessage());</span><br><span class="line">      <span class="comment">//要跳转的页面</span></span><br><span class="line">        mv.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置异常处理器</p>
<p>class属性值为异常处理器方法的全路径</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;bean id="sysExceptionResolver" class="com.zhaoning.usererror.SysExceptionResolver"&gt;&lt;/bean&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<h2 id="SpringMVC拦截器"><a href="#SpringMVC拦截器" class="headerlink" title="SpringMVC拦截器"></a>SpringMVC拦截器</h2><p><img src="/2020/04/04/SpringMVC/E:%5C%E7%AC%94%E8%AE%B0%E6%88%AA%E5%9B%BE%5CSpringMVC%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="SpringMVC拦截器"></p>
<ol>
<li><p>自定义拦截器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 预处理，controller方法执行前</span></span><br><span class="line"><span class="comment">    * return true 放行，执行下一个拦截器，如果没有，执行controller中的方法</span></span><br><span class="line"><span class="comment">    * return false 不放行。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*后处理方法，controller方法执行后，success.jsp执行之前</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*success.jsp页面执行后，该方法会执行</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置拦截器</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">    &lt;mcc:interceptors&gt;</span><br><span class="line">        &lt;mvc:interceptor&gt;</span><br><span class="line">&lt;!--            要拦截的具体方法--&gt;</span><br><span class="line">            &lt;mvc:mapping path=<span class="string">"/user/*"</span>/&gt;</span><br><span class="line">&lt;!--            不要拦截的方法--&gt;</span><br><span class="line">            &lt;mvc:exclude-mapping path=<span class="string">""</span>/&gt;</span><br><span class="line">&lt;!--            配置拦截器对象--&gt;</span><br><span class="line">            &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.zhaoning.lanjieqi.MyInterceptor"</span>/&gt;</span><br><span class="line">        &lt;/mvc:interceptor&gt;</span><br><span class="line">    &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
        <category>ssm</category>
      </categories>
      <tags>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>git</title>
    <url>/2020/04/27/git/</url>
    <content><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>git：全量（每一个版本都包含全部的文件，时刻保持数据的完整性）</p>
<p>git三种状态</p>
<ol>
<li>已修改（modified）</li>
<li>已暂存（staged）</li>
<li>已提交（commited）</li>
</ol>
<p>三个区域：</p>
<ol>
<li>工作区unstage</li>
<li>暂存区stage</li>
<li>对象区</li>
<li><img src="/2020/04/27/git/4.png" alt></li>
</ol>
<p>.git ：git版本控制目录（隐藏目录）</p>
<p>将某个目录纳入git管理：git init （默认到主分支 ）</p>
<p>add和commit合并   <code>git commit -am &quot;&quot;</code></p>
<p>暂存区-&gt;工作区：git rm –cached hello.txt<br>                             git reset head xxx.txt</p>
<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><p>查看日志：</p>
<ol>
<li>git log</li>
<li>git log -最近的次数</li>
<li>git log –pretty=oneline   每次提交都只显示一行</li>
<li>git log –graph 图形界面</li>
<li>git log –graph –pretty=oneline –abbrev-commit  清爽模式</li>
</ol>
<a id="more"></a>

<p>如果某个文件 已提交，并且对其进行了修改，可以放弃修改（还原到已提交状态）:<code>git checkout -- xxx.txt</code></p>
<p>删除已提交的文件（在对象区）    git rm xxx.txt （删除后会被放到暂存区）<br>                                                        彻底删除    git commit -m”彻底删除”</p>
<p>重命名：git mv xxx1.txt  xxx2.txt<br>    原理（复制一份1 ，起名为2，然后删除1）</p>
<p>注释重写（重写提交说明）最近一次<br>    git commit –amend -m “修正”</p>
<p>checkout：放弃修改，放弃的是工作区中的修改，相对于暂存区或对象区</p>
<p>reset：将之前增加到暂存区中的内容，回退到工作区</p>
<p>checkout：版本穿梭（游离状态） git checkout sha1值</p>
<ol>
<li>修改后，必须提交</li>
<li>创建分支的好时机  git branch mybranch sha1值</li>
</ol>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>分支：一个commit链，一条工作记录线。<br>分支名（master）：指向当前的提交（commit）<br>HEAD：指向当前分支（HEAD-&gt;分支名）</p>
<p>查看分支    git branch<br>创建分支    git branch 分支名<br>切换分支    git checkout  分支名<br>删除分支    git branch -d 分支名（不能删除当前分支）<br>                        其他不能删除的情况：包含“未合并”的内容<br>                        删除之前先合并 git merge 分支名</p>
<p>查看所有分支的sha1值和最近一次的注释  git branch -v</p>
<p>创建新分支 并切换    git checkout -b 分支名</p>
<ol>
<li>如果在分支A中进行了写操作，但此操作局限在工作区 中进行（没add commit），在主分支能看到该操作</li>
<li>如果在分支A中进行了写操作，进行了commit，则主分支无法观察到此文件</li>
<li>如果在分支A中进行了写操作，但此操作局限在工作区 中进行（没add commit），可以删除分支A</li>
</ol>
<h2 id="fast-forward"><a href="#fast-forward" class="headerlink" title="fast forward"></a>fast forward</h2><p>如果一个分支靠前（dev），另一个落后（master）。则如果不冲突，master可以通过merge直接追赶上dev，追赶动作称为fast forward。</p>
<p>fast forward 本质是 分支指针的移动，注意：跳过的中间commit，仍然会保存<br>fast forward :1,两个分支 fast forward 归于一点commit<br>                      2，没有分支信息（丢失分支信息）</p>
<p>git在merge时，默认使用fast forward；也可以禁止：git merge –no-ff<br>          1. 两个分支 fast forward，不会归于一点commit（主动合并的分支 会前进一步）<br>          2. 分支信息完整（不丢失分支信息）</p>
<h2 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h2><p>分支合并：如果冲突，需要解决冲突。</p>
<p>解决冲突之后：git add xxx，git commit -m””<br>git add xxx（告知git，冲突已解决）</p>
<p>注意：master在merge时，如果遇到冲突 并解决，则解决冲突 会进行2次提交：1次是最终提交，1次是对方dev的提交信息也拿来了。<br>    如果一方落后，另一方在前面，则落后可以直接通过merge合并到 前进方，如果是在同一时刻，则可能会有冲突</p>
<p>分支重命名：<br>git branch -m master master2 </p>
<h1 id="现场"><a href="#现场" class="headerlink" title="现场"></a>现场</h1><ol>
<li>建议（规范）：在功能模块没有开发完毕之前，不要commit</li>
<li>规定（必须）：在没有commit之前，不能切换分支(不在同一个commit阶段)</li>
<li>如果还没有将某一个功能开发完毕，就要切换分支：建议先保存现场，在切换。</li>
</ol>
<p>git stash：保存现场</p>
<p>git stash save “备注”</p>
<p>git stash list ：查看现场</p>
<h3 id="还原现场"><a href="#还原现场" class="headerlink" title="还原现场"></a>还原现场</h3><p>还原现场默认还原最近一次</p>
<ol>
<li><p>git stash pop ：还原现场（将原来保存的删除，用于还原内容）</p>
</li>
<li><p>git stash apply ：还原内容，不删除原保存的内容。</p>
<p>可以指定某一次的现场进行还原  <code>git stash apply stash@{x};</code></p>
<p>手动删除现场：<code>git stash drop stash@{x};</code></p>
</li>
</ol>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>标签适用于整个项目，和具体的分支没关系</p>
<p>git tag xxx    打标签   简单标签，只存储当前的commit的sha1值</p>
<p>git tag -a xxx -m “注释”     会产生一个新commit/sha1，存储信息，其中包含了当前的commit的sha1值</p>
<p>git tag 查看标签</p>
<p>git tag -d 标签名  删除标签</p>
<p>git tag -l ‘xx’ 模糊查询</p>
<p>git show 标签名  ；查看标签细节</p>
<p>git push origin 标签名；向远端推送标签</p>
<p>git push origin –tags；将本地的所有没推送的标签推送到远程</p>
<p>git push origin 本地标签名：远程标签名 ； 将本地的标签推送到远程，可以自定义名字</p>
<p>git pull  ；如果远端新增标签，则pull可以将新增标签拉倒本地，如果远端删除标签，则无法感知</p>
<p>git fetch origin tag 标签名；获取远程的指定标签</p>
<p>git push origin  :refs/tags/标签名；删除远程标签</p>
<h1 id="责任"><a href="#责任" class="headerlink" title="责任"></a>责任</h1><p><img src="/2020/04/27/git/%E8%B4%A3%E4%BB%BB.png" alt="责任"></p>
<p>git  blame a.txt : 查看a.txt的所有提交commit sha1值，以及每一行的作者</p>
<h2 id="差异性"><a href="#差异性" class="headerlink" title="差异性"></a>差异性</h2><p><img src="/2020/04/27/git/%E5%B7%AE%E5%BC%82.png" alt="差异"></p>
<p>git diff ：比较的是区中的文件  比较的是暂存区和工作区的差异</p>
<p>git diff commit的sha1值：对象区和工作区的差异</p>
<p>git diff head：最新对象区和工作区的差异</p>
<p>git diff –cached commit的sha1值：对象区和暂存区的差异</p>
<p>git diff –cached head：最新对象区和暂存区的差异</p>
<h1 id="联系GitHub"><a href="#联系GitHub" class="headerlink" title="联系GitHub"></a>联系GitHub</h1><p>push：本地—》github</p>
<p>pull ：github—》本地   pull=fetch(拉取) + merge(合并)</p>
<p>推送：</p>
<ol>
<li><p>git remote add origin <a href="mailto:git@github.com">git@github.com</a>:zxq-znn/mygit.git</p>
<p>给<code>git@github.com:zxq-znn/mygit.git</code> 起个别名叫 origin</p>
</li>
<li><p>git push -u origin master</p>
<p>本地master   github是origin  从master推送到origin</p>
</li>
</ol>
<p>后续修改推送时，只需要git push</p>
<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><p>ssh配置：本地  私钥，远程github存放公钥</p>
<p>ssh-keygen    生成：私钥（本机）  公钥（github）</p>
<p>可以将公钥放在github中的两个地方</p>
<ol>
<li>项目的settings中，只有当前项目可以和本机免密钥登录</li>
<li>账号的settings中，账号的所有项目 都可以和本机免密钥登录</li>
</ol>
<p>git remote show origin：查询远程地址</p>
<p>git remote show ：查询远端有多少个服务器</p>
<p>分支建议：</p>
<ul>
<li>dev：开发分支，频繁改变</li>
<li>test：基本开发完毕后，交给测试实施人员的分支</li>
<li>master：生产阶段，很少变化</li>
<li>bugfix：临时修复bug分支</li>
</ul>
<p>基本流程</p>
<p>dev –&gt;test（merge  dev）–&gt;master（merge  test）–&gt;…</p>
<p>连接到github之后，git会在本地维护  origin/master分支，通过该分支，感知远程github的内容</p>
<p>git branch -av<br><img src="/2020/04/27/git/%E6%9F%A5%E7%9C%8B%E6%9C%AC%E5%9C%B0%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF.png" alt="查看本地远程分支"></p>
<h3 id="远程到本地"><a href="#远程到本地" class="headerlink" title="远程到本地"></a>远程到本地</h3><p>下载</p>
<p>git clone  <a href="mailto:git@github.com">git@github.com</a>:zxq-znn/mygit.git</p>
<p>后面不加参数，本地默认项目名为次文件名</p>
<p>git clone  <a href="mailto:git@github.com">git@github.com</a>:zxq-znn/mygit.git   mygit2</p>
<p>后面加参数，重命名文件夹</p>
<h2 id="pull-amp-push"><a href="#pull-amp-push" class="headerlink" title="pull&amp;push"></a>pull&amp;push</h2><p>推送和改变指针<br><img src="/2020/04/27/git/pull%E5%92%8Cpush.png" alt></p>
<p><code>Fast-forward</code>在pull的时候发现更新的内容比自己先一步（commit的sha1值在自己之前），则会自动合并</p>
<h2 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h2><p>电脑1和电脑2修改了相同的部分，又提交到了github，这时后提交的会提交不上去</p>
<p>解决方案</p>
<p>fetch first</p>
<p>git pull</p>
<p>pull = fetch + merge</p>
<p>有冲突：</p>
<p>merge失败：vi解决冲突—》git add . —》commit</p>
<p>总结：</p>
<p>pull  —&gt; vi —&gt;add —&gt;commit  —&gt;push</p>
<h1 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h1><p>gui 、gitk</p>
<h1 id="查看远端日志"><a href="#查看远端日志" class="headerlink" title="查看远端日志"></a>查看远端日志</h1><p>git log origin/master</p>
<p>git log origin/refs/remotes/origin</p>
<p>分支：就是一个指针，commit的sha1值</p>
<h1 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h1><p><img src="/2020/04/27/git/%E5%88%86%E6%94%AF%E5%86%B2%E7%AA%81.png" alt="分支冲突"></p>
<p>查看本地和远程分支：git push</p>
<h3 id="1、本地-》远程：（本地有多出的分支，远程没有）"><a href="#1、本地-》远程：（本地有多出的分支，远程没有）" class="headerlink" title="1、本地-》远程：（本地有多出的分支，远程没有）"></a>1、本地-》远程：（本地有多出的分支，远程没有）</h3><p>在多出的分支 git push会报错</p>
<ul>
<li><p>方法一</p>
<p>git push -u origin dev</p>
</li>
<li><p>方法二</p>
<p>git push –set-upstream origin test</p>
</li>
</ul>
<p>git push origin dev:dev2，可以实现本地dev，远程dev2关联</p>
<h3 id="2、远程-》本地：（远程有多出的分支，本地没有）"><a href="#2、远程-》本地：（远程有多出的分支，本地没有）" class="headerlink" title="2、远程-》本地：（远程有多出的分支，本地没有）"></a>2、远程-》本地：（远程有多出的分支，本地没有）</h3><ol>
<li><p>pull：远程-》追踪</p>
</li>
<li><p>追踪-》本地</p>
<ul>
<li><p>方法一</p>
<p>git checkout -b dev origin/dev</p>
</li>
<li><p>方法二</p>
<p>git checkout -b test–track origin/test（此写法可以是名字不一样）</p>
<p>化简：git checkout –track origin/aaa</p>
</li>
</ul>
</li>
</ol>
<p>一步到位：git pull origin 远程分支：本地分支</p>
<ul>
<li>相当于git pull + git checkout -b dev origin/dev</li>
</ul>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>利用这个命令 git push origin src:dest     将本地src分支推送到远程dest分支（自动关联）</p>
<p>删除远程分支：</p>
<ul>
<li>git push origin  :test</li>
<li>git push origin –delete dev</li>
</ul>
<p>追踪分支有，远程分支有，本地分支没有</p>
<p>通过git remote prune origin –dry-run查看有哪些是不需要的远程分支</p>
<p>清理无效的追踪分支（本地中感知的远程分支）：git remote prune origin</p>
<h1 id="设置邮箱，用户名"><a href="#设置邮箱，用户名" class="headerlink" title="设置邮箱，用户名"></a>设置邮箱，用户名</h1><p>git config –global   （基本不用，给整个计算机一次性设置）<br>git config –system    （推荐，给当前用户一次性设置）<br>git config –local  （给当前项目一次性设置）</p>
<p>给当前用户设置邮箱名字：<br>c/users/asus/.gitconfig</p>
<p>git config –local user.name ‘xxx’<br>git config –local user.email ‘xxx’</p>
<p>删除：git config –local –unset user.name</p>
<h1 id="给指令起别名"><a href="#给指令起别名" class="headerlink" title="给指令起别名"></a>给指令起别名</h1><p>git config –global alias.ch checkout</p>
<p>以后ch可以代替checkout</p>
<h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><p>删除已提交的文件：<br>git  rm xxx ： 1.删除  2  暂存区<br>删除之后 文件被放到暂存区</p>
<p>彻底删除：git commit -m “彻底删除”</p>
<p>git rm 后悔 1、到工作区git reset head xxx.txt<br>                   2，还原动作 git checkout – xxx.txt</p>
<p>操作系统删除   rm：1.删除  2.工作区</p>
<h1 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h1><p>创建.gitignore，把要忽略的文件名写到里面</p>
<p>忽略文件<br>    gitignore<br>    dir/:忽略dir目录中的所有文件<br>    dir/<em>*/</em>.txt:忽视任意级别目录<br>    空目录默认忽略</p>
<h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><p>git gc</p>
<p>objects、refs中记录了很多的commit的sha1值，如果执行gc，则会将这么多的sha1值存放到一个压缩文件packed-refs中</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>js</title>
    <url>/2020/04/14/js/</url>
    <content><![CDATA[<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><h2 id="一、数据转换"><a href="#一、数据转换" class="headerlink" title="一、数据转换"></a>一、数据转换</h2><h3 id="隐式转换："><a href="#隐式转换：" class="headerlink" title="隐式转换："></a>隐式转换：</h3><ol>
<li><p>typeof()或typeof<br> ex : var num = 15;<br> var s = typeof(num); 获取num的数据类型  </p>
</li>
<li><p>NaN<br> Not a Number<br> 不是一个数字<br> isNaN(数据)：判断数据是否为非数字<br> 是 返回 false<br> 不是 返回 true  </p>
<h3 id="强制转换："><a href="#强制转换：" class="headerlink" title="强制转换："></a>强制转换：</h3></li>
<li><p>toString()<br>将任意类型的数据转换为string类型<br>语法：  变量.toString();</p>
</li>
<li><p>parseInt()<br> 作用：获取指定数据的整数部分<br> 语法：</p>
<pre><code>var result = parseInt(数据)；  </code></pre><p> 从左向右依次转换，碰到第一个非整数，则停止转化<br> 如果第一个就是非整数字符，结果为NaN。  </p>
</li>
<li><p>parseFloat()<br> 作用：将指定的数据转换成小数<br> 语法：</p>
<pre><code>var result = parseFloat(数据);  </code></pre><p> 同上</p>
</li>
<li><p>Number()<br> 作用：将一个字符串解析为number<br> 语法：</p>
<pre><code>var result = Number(数据);  </code></pre><p> 如果包含不是数字的数 返回NaN</p>
<a id="more"></a>

</li>
</ol>
<h2 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h2><ol>
<li>定义语法： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function 函数名()&#123;</span><br><span class="line">可执行语句；</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure></li>
<li>调用语法：<pre><code>函数名();</code></pre></li>
<li>作用域：<br> 就是变量或函数的可访问范围，它控制着变量或函数的可见性和生命周期。<br> 在js中，变量或函数的作用域可分为：  <ol>
<li>函数作用域，只在当前函数内可访问。</li>
<li>全局作用域，一经定义，代码的任何位置都可以访问</li>
</ol>
</li>
</ol>
<h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><ol>
<li><p>创建空数组：  </p>
<ol>
<li>数组直接量：var arr = [];  </li>
<li>用new ：var arr = new Array();</li>
</ol>
</li>
<li><p>创建 并初始化：  </p>
<ol>
<li>var arr = [元素1,元素2,元素3];  </li>
<li>new arr = new Array(元素1,元素2,元素3);</li>
</ol>
</li>
<li><p>数组API</p>
<ol>
<li><p>String(数组名):  </p>
<pre><code>将数组中每个元素转为字符串，用逗号分隔开  
`套路：`对数组拍照，用于鉴别是否数组被修改过。  </code></pre></li>
<li><p>数组名.join(“连接符”)：</p>
<pre><code>将数组中每个元素转为字符串，用自定义的连接符分隔。
套路：判断数组是空数组   数组名.join(&quot;&quot;)==&quot;&quot;</code></pre></li>
<li><p>拼接：concat()  </p>
<pre><code>var arr=arr1.concat(值1,值2,arr2,值3);  </code></pre></li>
<li><p>选取：slice() 返回现有数组的一个子数组  </p>
<pre><code>var arr = arr1.slice(起始位，截止位);含头不含尾  
套路：复制数组 arr.slice();  </code></pre></li>
<li><p>删除：splice()  </p>
<pre><code>直接修改原数组  
var deletes = arr.splice(start,n);  
删除从start开始的n个元素  
将arr删除后赋值给delets  </code></pre></li>
<li><p>插入：splice(start,0,值1,值2);  </p>
<pre><code>在arr中starti位置，插入新值1，值2 原starti位置的值及其之后的值向后移。</code></pre></li>
<li><p>替换：splice(start,n,值1,值2);  </p>
<pre><code>本质就是删除旧的，插入新的  
强调：删除的元素个数和插入的新元素个数不必一致。  </code></pre></li>
<li><p>颠倒：</p>
<pre><code>reverse()颠倒数值中元素的顺序  
arr.reverse();  
强调：仅负责原样颠倒数组不负责排序  </code></pre></li>
<li><p>排序：arr.sort()    默认将所有元素转为字符串在排列  </p>
<pre><code>问题：只能排列字符串类型的元素  
解决：使用自定义比较器函数  </code></pre></li>
</ol>
</li>
</ol>
<h2 id="四、DOM"><a href="#四、DOM" class="headerlink" title="四、DOM"></a>四、DOM</h2><p>document object model  </p>
<ol>
<li><p>按id属性，精确查找一个元素对象（效率非常高）  </p>
<pre><code>`var elem = document.getElementById(&quot;id&quot;); `   
`强调：`getElementById只能用在document上  
`何时：`只用于精确查找一个元素  </code></pre></li>
<li><p>按标签名找</p>
<pre><code>`var elems = parent.getElementsByTagName(&quot;tag&quot;); `   
查找指定parent节点下的所有标签为tag的子代节点  
`强调：`父元素必须是单个对象  </code></pre><ol>
<li>可用在任意父元素上</li>
<li>不仅查直接节点，而且查所有子代节点</li>
<li>返回一个伪数组，用[]取出唯一元素</li>
</ol>
</li>
<li><p>通过name属性查找  </p>
<pre><code>`var elems = document.getElementsByName(&apos;name&apos;) `   
可以返回DOM数中具有指定name属性值的所有子元素集合  </code></pre></li>
<li><p>通过class查找</p>
<pre><code>查找父元素下指定class属性的元素  
`var elems = parent.getElementsByClassName(&quot;class&quot;);`  </code></pre></li>
<li><p>通过选择器查找  </p>
<ol>
<li>找一个元素：  <pre><code>`var elem = parent.querySelector(&quot;selector&quot;);`</code></pre></li>
<li>找多个元素：  <pre><code>`var elems = parent.querySelectorAll(&quot;selector&quot;);`
    返回指定选择器的第一个元素对象</code></pre></li>
</ol>
</li>
<li><p>获取特殊元素body，html 对象</p>
<ol>
<li>获取body元素<pre><code>`document.body`</code></pre></li>
<li>获取html元素<pre><code>`document.documentElement`</code></pre></li>
</ol>
</li>
</ol>
<h2 id="五、DOM进阶："><a href="#五、DOM进阶：" class="headerlink" title="五、DOM进阶："></a>五、DOM进阶：</h2><h3 id="1、DOM-文档对象模型"><a href="#1、DOM-文档对象模型" class="headerlink" title="1、DOM 文档对象模型"></a>1、DOM 文档对象模型</h3><ul>
<li>文档：一个页面就是一个文档，DOM中使用document表示</li>
<li>元素：页面中的所有标签都是元素，DOM中使用element表示</li>
<li>节点：网页中的所有内容都是节点（标签，属性，文本，注释等），DOM中使用node表示<br><code>DOM把以上内容都看做是对象</code></li>
</ul>
<p>console.dir(timer);    打印我们返回的元素对象  更好的查看里面的属性和方法</p>
<h2 id="2、事件三要素："><a href="#2、事件三要素：" class="headerlink" title="2、事件三要素："></a>2、事件三要素：</h2><ul>
<li>事件源    </li>
<li>事件类型       </li>
<li>事件处理程序  </li>
</ul>
<h3 id="1、三要素"><a href="#1、三要素" class="headerlink" title="1、三要素"></a>1、三要素</h3><ol>
<li><p>事件源<br>事件被触发的对象<br>谁（比如：按钮）获取对象</p>
</li>
<li><p>事件类型<br>如何触发<br>什么事件   （比如鼠标点击（onclick） 还是鼠标经过  还是键盘按下）</p>
</li>
<li><p>事件处理程序<br>通过一个函数赋值的方式 完成</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">btn.onclick &#x3D; function()&#123;</span><br><span class="line">alert(&quot;点秋香&quot;)；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="2、事件基础"><a href="#2、事件基础" class="headerlink" title="2、事件基础"></a>2、事件基础</h3><p>执行事件的步骤</p>
<ol>
<li>获取事件源</li>
<li>注册事件（绑定事件）</li>
<li>添加事件处理程序（采用函数赋值形式）</li>
</ol>
<h3 id="3、事件："><a href="#3、事件：" class="headerlink" title="3、事件："></a>3、事件：</h3><ul>
<li>获得焦点 onfocus</li>
<li>失去焦点 onblur</li>
<li>鼠标经过 onmouseover</li>
<li>鼠标离开 onmouseout</li>
<li>鼠标移动 onmousemove</li>
</ul>
<h3 id="4、改变元素："><a href="#4、改变元素：" class="headerlink" title="4、改变元素："></a>4、改变元素：</h3><ol>
<li>改变元素内容：  </li>
</ol>
<ul>
<li><p><code>element.innerText</code>    从起始位置到终止位置的内容，但它去除html标签，同时空格 换行也会去掉</p>
</li>
<li><p><code>element.innerHTML</code>  从起始位置到全部内容，包括html标签，同时保留空格和换行</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line">	var p &#x3D; document.querySelector(&quot;p&quot;);</span><br><span class="line">	p.innerText &#x3D; getDate();</span><br></pre></td></tr></table></figure>

<p>  两者区别：</p>
</li>
</ul>
<ol>
<li><p>innerText 不识别html 标签 非标准 去除空格和换行</p>
</li>
<li><p>innerHTML 识别html标签 w3c标准 保留空格和换行</p>
</li>
</ol>
<p><code>这两个属性是可读写的  可以获取元素里面的内容  p.innerHTML</code></p>
<ol start="2">
<li><p>修改元素属性<br>常用属性<br><code>innerText,innerHTML,src,href,id,alt,title</code></p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zxy.onlick &#x3D; function()&#123;</span><br><span class="line">img.src &#x3D; &#39;xxx&#39;;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>表单元素的属性操作  </p>
<pre><code>利用DOM可以操作如下表单元素的属性：  
    `type  value  checked  selected  disabled`</code></pre> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">btn.disabled &#x3D; true;</span><br><span class="line">this.disabled &#x3D; true; </span><br><span class="line">this 指向的是事件函数的调用者</span><br></pre></td></tr></table></figure>
</li>
<li><p>样式属性操作<br> 我们可以通过js修改元素的大小 颜色 位置等样式  </p>
<pre><code>1. element.style  行内样式操作  
2. element.className 类名样式操作</code></pre><p> <code>注意</code>  </p>
<pre><code>JS里面的样式采用驼峰命名法  比如 fontSize  backgroundColor  
JS修改style样式操作，产生的是行内样式，权重高</code></pre></li>
</ol>
<pre><code>1. 使用element.style 获得修改元素样式，如果样式比较少 或者 功能简单的情况下使用

2. 我们可以通过 修改元素的`className`更改元素的样式  适合于样式较多或者功能复杂的情况
    <figure class="highlight js"><table><tr><td class="code"><pre><span class="line">.change&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">类名.className = <span class="string">'change'</span>;</span><br></pre></td></tr></table></figure>
    `会覆盖原类名`
3. 如果想要保留原先的类名，我们可以这么做，多类名选择器  
        类名.className=&apos;first change&apos;;</code></pre><ol start="5">
<li><p>自定义属性的操作</p>
<ol>
<li><p>获取属性值  </p>
<pre><code>`element.属性
element.getAttribute(&apos;属性&apos;);`</code></pre><p> 区别：  </p>
<pre><code>element.属性 获取内置属性值（元素本身自带的属性）  
element.getAttribute(&apos;属性&apos;);  主要获得自定义的属性（标准） 我们程序员自定义的属性</code></pre></li>
<li><p>设置属性值  </p>
<pre><code>element.属性=&apos;值&apos;  设置内置属性值  
element.setAttribute(&apos;属性&apos;,&apos;值&apos;);</code></pre><p> 区别：</p>
<pre><code>element.属性  设置内置属性值
element.setAttribute(&apos;属性&apos;,&apos;值&apos;);  主要设置自定义的属性 （标准）</code></pre></li>
<li><p>移除属性  </p>
<pre><code>element.removeAttribute(&apos;index&apos;);  </code></pre><p> H5规定：自定义属性以  data-开头<br> H5新增获取自定义属性  </p>
<pre><code>element.dataset.属性名  或者 element.dataset[&apos;index&apos;]  
dataset是一个集合，自定义属性的集合，以data-开头  </code></pre><p> 如果自定义属性里面有多个-连接的单词，我们获取的时候采取 驼峰命名法<br> 比如：  </p>
<pre><code>data-list-name  
dataset.listName或dataset[&apos;listName&apos;]</code></pre></li>
</ol>
</li>
</ol>
<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><p>一、  </p>
<ol>
<li>利用DOM提供的方法获取元素  逻辑性不强，繁琐  </li>
<li>利用节点层级关系获取元素<br> 利用父子兄节点关系获取元素<br> 逻辑性强，但是兼容性稍差</li>
</ol>
<p>二、一般的，节点至少用<code>nodeType(节点类型)，nodeName(节点名称)，nodeValue(节点值)</code>三个基本属性</p>
<p>元素节点：nodeType 为 1<br>属性节点：nodeType 为 2<br>文本节点：nodeType 为 3（文本节点包含文字，空格，换行等）</p>
<p><code>注意：</code>我们在实际开发中，节点操作主要操作的是元素节点</p>
<p>三、</p>
<ol>
<li>获取父节点：节点.parentNode  <pre><code>返回最近的父节点  
如果没有返回NULL</code></pre></li>
</ol>
<ol start="2">
<li><p>获取子节点<br> parentNode.childNodes  (标准)  </p>
<p> 返回 包含指定节点的子节点的集合，该集合为即时更新的集合</p>
<p> <code>注意：</code>返回值里面包含了所有子节点，包括元素节点，文本节点等</p>
<p> 如果只想获得里面的元素节点，则需要专门处理，所以我们一般不提倡使用childNodes</p>
</li>
</ol>
<p>​<br>​    - 获取所有的子元素节点，也是我们实际开发常用的<br>​    parentNode.children</p>
<pre><code>- 获取第一个子节点（包含所有节点）：
            parentNode.firstChild  找不到返回null

- 获取最后一个子节点（包含所有节点）：
            parentNode.lastChild  找不到返回null


- 获取第一个子元素：
            parentNode.firstElementChild

- 获取最后一个子元素：
            parentNode.lastElementChild


- 实际开发的写法，既没有兼容性问题又返回第一个子元素
    parentNode.children[0]

- 返回最后一个子元素
            parentNode.children[parent.Node.children.length-1]</code></pre><ol start="3">
<li><p>兄弟节点</p>
<ul>
<li><p>返回返回当前元素下一个兄弟节点，找不到则返回null：</p>
<pre><code>node.nextSibling</code></pre></li>
<li><p>返回当前元素下一个兄弟元素节点，找不到则返回null：</p>
<pre><code>node.perviousSibling</code></pre></li>
<li><p>返回当前元素下一个兄弟元素节点，找不到则返回null：</p>
<pre><code>node.nextElementSibling</code></pre></li>
<li><p>返回当前元素下一个兄弟元素节点，找不到则返回null：</p>
<pre><code>node.perviousElementSibling  </code></pre></li>
</ul>
</li>
</ol>
<ol start="4">
<li><p>增删节点</p>
<ul>
<li><p>创建节点（元素节点）<br>document.createElement(‘标签名’);</p>
</li>
<li><p>添加节点</p>
<ol>
<li>node.appendChild(child);<br>node 父级  child 子级   在后面追加元素</li>
<li>node.insertBefore(child,指定元素)<br>在指定元素前加节点</li>
</ol>
</li>
</ul>
</li>
</ol>
<pre><code>- 删除节点
        node.removeChild(child)
        node 是父级


`阻止链接跳转：javascript:void(0);或javascript:;`</code></pre><ol start="5">
<li><p>复制节点  </p>
<pre><code>node.cloneNode()  
返回调用该方法的节点的一个副本</code></pre><p> <code>注意：</code>如果括号参数为空或者为false，则是浅拷贝，</p>
<pre><code>true，深拷贝</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for(var k in obj)&#123;</span><br><span class="line">       k 得到的是属性名</span><br><span class="line">       obj[k] 得到的是属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>四、创建元素</p>
<ol>
<li><p>document.write()  如果页面文档流加载完毕，再调用这句话会导致页面重绘</p>
</li>
<li><p>innerHTML 是将内容写入某个DOM节点 ，不会导致页面全部重绘</p>
</li>
<li><p>innerHTML 创建多个元素效率更高（不拼接字符串，采取数组形式拼接），结构稍微复杂</p>
</li>
<li><p>createElement() 创建多个元素效率稍微低一点点，但是结构更清晰</p>
</li>
</ol>
<p>alert() 弹出对话框</p>
<h2 id="六、事件高级"><a href="#六、事件高级" class="headerlink" title="六、事件高级"></a>六、事件高级</h2><h3 id="1，注册事件（绑定事件）"><a href="#1，注册事件（绑定事件）" class="headerlink" title="1，注册事件（绑定事件）"></a>1，注册事件（绑定事件）</h3><p>两种方式：传统方式和方法监听注册方式</p>
<ol>
<li><p>传统方式：<br> 利用on开头的事件<br><code>&lt;button onclick = &quot;alert(&#39;hi&#39;)&quot;&gt;&lt;/button&gt;</code><br> but.onclick = function(){}<br> 特点：注册事件的唯一性<br> 同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数  </p>
</li>
<li><p>方法监听注册方式：<br> w3c标准  推荐方法<br> addEventListener()是一个方法<br> IE9之前不支持，可用attachEvent()<br> 特点：同一个元素同一个事件可以注册多个监听器<br> 按注册顺序依次执行   </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addEventListener事件监听方式</span><br><span class="line">	</span><br><span class="line">eventTarget.addEventListener(type,listener[,useCapture])</span><br><span class="line">	</span><br><span class="line">divs[1].addEventListener(&#39;click&#39;,fn);</span><br><span class="line">function fn()&#123;</span><br><span class="line">alert(22);</span><br><span class="line">divs[1].removeEventListener(&#39;click&#39;,fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 将指定的监听器注册到eventTarget（目标对象）上，当该对象触发指定事件时，就会执行事件处理函数</p>
<p> 三个参数：  </p>
<ul>
<li>type：事件类型字符串，比如  click，mouseover</li>
<li>listener：事件处理函数，事件发生时，会调用该监听函数</li>
<li>useCapture：可选参数，是一个布尔值，默认是false</li>
</ul>
</li>
</ol>
<h3 id="2，删除事件"><a href="#2，删除事件" class="headerlink" title="2，删除事件"></a>2，删除事件</h3><ol>
<li><p>传统方式<br> eventTarget.onclick = null;</p>
</li>
<li><p>方法监听注册方式<br> eventTarget.removeEventListener(type,listener[,useCapture];)</p>
<p> eventTarget.detachEvent(eventNameWithOn,callback);</p>
</li>
</ol>
<h3 id="3，DOM事件流"><a href="#3，DOM事件流" class="headerlink" title="3，DOM事件流"></a>3，DOM事件流</h3><ol>
<li>JS代码中只能执行捕获或者冒泡其中的一个阶段</li>
<li>onclick和attachEvent 只能得到冒泡阶段</li>
<li>addEventListener()第三个参数如果是true，表示在事件捕获阶段调用事件处理程序如果是false（不写默认是false），表示在事件冒泡阶段调用事件处理程序</li>
<li>实际开发中我们很少使用事件捕获，更关注事件冒泡。</li>
<li>有些事件是没有冒泡的，比如：onblur,onfocus,onmouseenter,onmouseleave    </li>
<li>事件冒泡有时候会带来麻烦，有时候又会帮助很巧妙的做某些事件</li>
</ol>
<h3 id="4，事件对象"><a href="#4，事件对象" class="headerlink" title="4，事件对象"></a>4，事件对象</h3><ol>
<li>event 就是一个事件对象，写到我们侦听函数的小括号里面，当形参来看</li>
<li>事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</li>
<li>事件对象 是 我们事件的一系列相关数据的集合，跟事件相关，比如鼠标点击里面就包含了鼠标的相关信息</li>
<li>这个事件对象我们可以自己命名 比如  event ，evt，e</li>
<li>事件对象也有兼容性问题   ie678  通过 window.event 兼容性的写法  e=e||window.event;</li>
</ol>
<p><strong>常见事件对象的属性和方法：</strong>  </p>
<ol>
<li><p>e.target 返回的是触发事件的对象（元素） this返回的是绑定事件的对象（元素）<br> 区别：e.target 点击了那个元素，就返回那个元素，this 那个元素绑定了这个点击事件，就返回谁</p>
<p> IE678   e.srcElement</p>
</li>
</ol>
<ol start="2">
<li>e.type 返回事件类型</li>
</ol>
<ol start="3">
<li>e.preventDefault(); 阻止默认行为（事件 让链接不跳转或让提交按钮不提交）  <pre><code>低版本：e.returnValue;  
        return false;</code></pre></li>
</ol>
<h3 id="5，阻止事件冒泡"><a href="#5，阻止事件冒泡" class="headerlink" title="5，阻止事件冒泡"></a>5，阻止事件冒泡</h3><pre><code>    e.stopPropagation()
IE678    e.cancelBubble = true;</code></pre><h3 id="6，事件委托"><a href="#6，事件委托" class="headerlink" title="6，事件委托"></a>6，事件委托</h3><pre><code>给父节点添加监听器，利用事件冒泡影响每一个子节点</code></pre><h3 id="7，鼠标事件"><a href="#7，鼠标事件" class="headerlink" title="7，鼠标事件"></a>7，鼠标事件</h3><p>禁止右键  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.addEventListener(&#39;contextmenu&#39;,function(e)&#123;</span><br><span class="line">		e.preventDefault();</span><br><span class="line">	</span><br><span class="line">	&#125;)</span><br></pre></td></tr></table></figure>
<p>禁止选中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.addEventListener(&#39;selectstart&#39;,function(e)&#123;</span><br><span class="line">	e.preventDefault();</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


<p>​<br>​鼠标事件对象   </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e.clientX		返回鼠标相对于浏览器窗口可视区的X坐标</span><br><span class="line">e.clientX</span><br><span class="line">e.pageX		返回鼠标相对于文档页面可的X坐标</span><br><span class="line">e.pageY</span><br></pre></td></tr></table></figure>


<h3 id="8，键盘事件"><a href="#8，键盘事件" class="headerlink" title="8，键盘事件"></a>8，键盘事件</h3><ul>
<li><p>onkeyup      某个键盘按键被松开时触发</p>
</li>
<li><p>onkeydown    某个键盘按键被按下时触发</p>
</li>
<li><p>onkeypress     某个键盘按键被按下时触发（不识别功能键 ）</p>
</li>
</ul>
<p><code>注意：</code><br>如果使用addEventListener不需要加on<br>    onkeypress和前面2个的区别是，它不识别功能键</p>
<p>执行顺序：keydown  keypress  keyup</p>
<p>键盘对象属性<br>        e.keyCode    返回该键的ASCLL值</p>
<p><code>注意：</code><br>onkeydown 和onkeyup 不区分字母大小写，onkeypress区分大小写<br>在实际开发中，我们更多的使用keydown和keyup，他能识别所以的键。<br>keypress不识别功能键，但是keyCode属性能区分大小写，返回不同的ASCLL值 </p>
<p>xxx.focus()获得焦点</p>
<p>​    </p>
<h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="一，window对象是浏览器的顶级对象，它具有双重角色"><a href="#一，window对象是浏览器的顶级对象，它具有双重角色" class="headerlink" title="一，window对象是浏览器的顶级对象，它具有双重角色"></a>一，window对象是浏览器的顶级对象，它具有双重角色</h2><ol>
<li><p>它是js访问浏览器窗口的一个接口</p>
</li>
<li><p>它是一个全局对象，定义在全局作用域中的变量，函数都会变成window对象的属性和方法<br>在调用的时候可以省略window，前面学习的对话框都属于window对象方法</p>
<p> <code>注意：</code>window下的一个特殊属性 window.name</p>
</li>
</ol>
<h2 id="二，窗口加载事件"><a href="#二，窗口加载事件" class="headerlink" title="二，窗口加载事件"></a>二，窗口加载事件</h2><ol>
<li><p>window.onload=function(){}<br>​            或者<br>​    window.addEventListener(“load”,function(){})<br> window.onload是窗口（页面）加载事件，当文档内容完全加载完成会触发该事件，就调用的处理函数<br> <code>注意：</code>  </p>
<ol>
<li>有了window.onload就可以把js代码写到页面元素的上方，因为onload是等页面内容全部加载完毕，再去执行处理函数</li>
<li>window.onload传统注册事件方式只能写一次，如果有多个，会以最后一个window,onload为准</li>
<li>如果使用addEventListener则没有限制</li>
</ol>
</li>
<li><p>document.addeventListener(‘DOMContentLoaded’,function(){})</p>
<p> 仅当DOM加载完成，不包括样式表，图片，flash等等</p>
</li>
<li><p>window.onpageshow    是我们重新加载页面触发的时间</p>
<pre><code>比load更安全</code></pre><p> 调整窗口大小事件</p>
<p> window.onresize = function(){}<br> window.addEventListener(“resize”,function(){});</p>
<p> window.onresize是调整窗口大小加载事件，当触发时就调用的处理函数</p>
<p> <code>注意：</code>  </p>
<ol>
<li>只要窗口大小发生像素变化，就会触发这个事件</li>
<li>我们经常利用这个事件完成响应式布局，window.innerWidth当前屏幕的宽度  <h2 id="三，定时器"><a href="#三，定时器" class="headerlink" title="三，定时器"></a>三，定时器</h2>​    window.setTimeout(调用函数,[延迟的毫秒数]);<br>​    用于设置一个定时器，该定时器在定时器到期后执行调用函数<br>​<br><code>注意：</code></li>
</ol>
</li>
<li><p>window可以省略</p>
</li>
<li><p>这个调用函数可以直接写函数，或者写函数名或者采取字符串’函数名()’，第三种不推荐</p>
</li>
<li><p>延迟的毫秒数省略默认是0，如果写，必须是毫秒</p>
</li>
<li><p>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符<br> window.clearTimeout(timeout ID)</p>
<p> 取消了先前通过调用setTimeout()建立的定时器</p>
<p> <code>注意：</code></p>
<ol>
<li>window可以省略</li>
<li>里面的参数就是定时器的标识符（定时器的名字）</li>
</ol>
</li>
</ol>
<pre><code>window.setInterval(调用函数,[延迟的毫秒数]);  
每隔这个延时时间，就去调用这个回调函数，重复调用这个函数      
停止：chearInterval(名字)；

`注意：`
1. window可以省略
2. 这个调用函数可以直接谐函数，或者写函数名或者采取字符串&apos;函数名()&apos;，第三种不推荐
3. 延迟的毫秒数省略默认是0，如果写，必须是毫秒
4. 因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</code></pre><h2 id="四，this指向问题"><a href="#四，this指向问题" class="headerlink" title="四，this指向问题"></a>四，this指向问题</h2><p>一般情况下this的最终指向的是哪个调用它的对象</p>
<ol>
<li><p>全局作用域或者普通函数中this指向全局对象window（注意定时器里面的this指向window）</p>
</li>
<li><p>方法调用中  谁调用this指向谁</p>
</li>
<li><p>构造函数中this指向构造函数的实例对象</p>
</li>
</ol>
<h2 id="五，同步和异步"><a href="#五，同步和异步" class="headerlink" title="五，同步和异步"></a>五，同步和异步</h2><p>为了解决这个问题，利用多核CPU的计算能力，HTML5提出Web Worker标准，允许JS脚本创建多个线程，于是，js中出现了同步和异步<br>本质区别：这条流水线上各个流程的执行顺序不同</p>
<h2 id="六，执行机制"><a href="#六，执行机制" class="headerlink" title="六，执行机制"></a>六，执行机制</h2><ul>
<li>同步任务：<br>  在主线程上执行，形成一个执行栈。</li>
<li>异步任务：<br>  js的异步是通过回调函数实现的<br>  一般而言，异步任务有以下三种：    <ol>
<li>普通事件：click，resize等</li>
<li>资源加载：load，error等</li>
<li>定时器：setLnterval，setTimeout等</li>
</ol>
</li>
</ul>
<pre><code>异步任务相关回调函数添加到任务队列中（消息队列）</code></pre><h2 id="七，location对象"><a href="#七，location对象" class="headerlink" title="七，location对象"></a>七，location对象</h2><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">*href</td>
<td align="center">获取或者设置整个URL</td>
</tr>
<tr>
<td align="center">host</td>
<td align="center">返回主机（域名）</td>
</tr>
<tr>
<td align="center">port</td>
<td align="center">返回端口号，如果未写返回 空字符串</td>
</tr>
<tr>
<td align="center">pathname</td>
<td align="center">返回路径</td>
</tr>
<tr>
<td align="center">*search</td>
<td align="center">返回参数</td>
</tr>
<tr>
<td align="center">hash</td>
<td align="center">返回片段 #后面内容 常见于链接锚点</td>
</tr>
</tbody></table>
<p>跳转页面：<br>    location.href = ‘<a href="http://www.baidu.com&#39;" target="_blank" rel="noopener">http://www.baidu.com&#39;</a>;</p>
<p>​        </p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">返回值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">location.assign()</td>
<td align="center">跟href一样，可以跳转页面（也称为重定向页面）</td>
</tr>
<tr>
<td align="center">location.replace()</td>
<td align="center">替换当前页面，因为不记录历史，所以不能后退页面</td>
</tr>
<tr>
<td align="center">location.reload()</td>
<td align="center">重新加载页面，相当于刷新按钮或者f5，如果参数为true 强制刷新ctrl+f5</td>
</tr>
</tbody></table>
<h2 id="八，navigator对象"><a href="#八，navigator对象" class="headerlink" title="八，navigator对象"></a>八，navigator对象</h2><p>包含有关浏览器的信息，他有很多属性，我们最常用的是userAgent,该属性可以返回由客户机发送服务器的user-agent头部的值</p>
<h2 id="九，history对象"><a href="#九，history对象" class="headerlink" title="九，history对象"></a>九，history对象</h2><p>window对象给我们提供了一个history对象，与浏览器历史记录进行交互，该对象包含用户（在浏览器窗口中）访问过的URL</p>
<p>​    </p>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">back()</td>
<td align="center">后退功能</td>
</tr>
<tr>
<td align="center">forward()</td>
<td align="center">前进功能</td>
</tr>
<tr>
<td align="center">go(参数)</td>
<td align="center">参数1 前进    参数-1 后退</td>
</tr>
</tbody></table>
<h1 id="高高级"><a href="#高高级" class="headerlink" title="高高级"></a>高高级</h1><h2 id="一，元素偏移量-offset-系列"><a href="#一，元素偏移量-offset-系列" class="headerlink" title="一，元素偏移量 offset 系列"></a>一，元素偏移量 offset 系列</h2><h3 id="1，offset翻译过来就是偏移量，我们使用offset系列相关属性可以动态的得到该元素的位置（偏移），大小等"><a href="#1，offset翻译过来就是偏移量，我们使用offset系列相关属性可以动态的得到该元素的位置（偏移），大小等" class="headerlink" title="1，offset翻译过来就是偏移量，我们使用offset系列相关属性可以动态的得到该元素的位置（偏移），大小等"></a>1，offset翻译过来就是偏移量，我们使用offset系列相关属性可以动态的得到该元素的位置（偏移），大小等</h3><p>获得元素距离带有定位父元素的位置<br>获得元素自身的大小（宽度高度）<br><code>注意：</code>返回的数值都不带单位</p>
<table>
<thead>
<tr>
<th align="center">offset属性</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">element.offsetParent</td>
<td align="center">返回作为该元素带有定位的父级元素，如果父级都没有定位则返回body</td>
</tr>
<tr>
<td align="center">.offsetTop</td>
<td align="center">返回元素相对带有定位父元素上方的偏移</td>
</tr>
<tr>
<td align="center">.offsetLeft</td>
<td align="center">返回元素相对带有定位父元素左方的偏移</td>
</tr>
<tr>
<td align="center">.offsetWidth</td>
<td align="center">返回自身包括padding,边框，内容区的宽度，不带单位</td>
</tr>
<tr>
<td align="center">.offsetHeight</td>
<td align="center">返回自身包括padding,边框，内容区的高度，不带单位</td>
</tr>
</tbody></table>
<h3 id="2，offset与style区别"><a href="#2，offset与style区别" class="headerlink" title="2，offset与style区别"></a>2，offset与style区别</h3><p>offset：  </p>
<ul>
<li>可以得到任意样式表中的样式值</li>
<li>获得的数值是没有单位的</li>
<li>offsetWidth包含padding+border+width</li>
<li>offsetWidth等属性是只读属性，只能获取不能赋值<br>所以，我们想要获取元素大小位置，用offset更合适</li>
</ul>
<p>style：</p>
<ul>
<li>只能得到行内样式表中的样式值</li>
<li>style.width获得的是带有单位的字符串</li>
<li>style.width获得不包含padding和border的值</li>
<li>style.width是可读写属性，可以获取也可以赋值<br>所以，我们想要给元素更改值，需要用style改变</li>
</ul>
<h2 id="二，元素可视区client系列"><a href="#二，元素可视区client系列" class="headerlink" title="二，元素可视区client系列"></a>二，元素可视区client系列</h2><p>client翻译过来就是客户端，我们使用client系列的相关属性来获取元素可视区的相关信息</p>
<table>
<thead>
<tr>
<th align="center">element.clientTop</th>
<th align="center">返回元素上边框大小</th>
</tr>
</thead>
<tbody><tr>
<td align="center">element.clientLeft</td>
<td align="center">返回元素左边框大小</td>
</tr>
<tr>
<td align="center">*element.clientWidth</td>
<td align="center">返回自身包括padding，内容区的宽度，不含边框，返回数值不带单位</td>
</tr>
<tr>
<td align="center">*element.clientHeight</td>
<td align="center">返回自身包括padding，内容区的高度，不含边框，返回数值不带单位</td>
</tr>
</tbody></table>
<p>立即执行函数：<br>    (function(){})()或者(function(){}())</p>
<p>主要作用：创建一个独立的作用域，避免了命名冲突问题</p>
<h2 id="三，元素滚动scroll系列"><a href="#三，元素滚动scroll系列" class="headerlink" title="三，元素滚动scroll系列"></a>三，元素滚动scroll系列</h2><p>事件<br>scroll    翻译过来就是滚动的，我们使用该系列的相关属性可以动态的得到该元素的大小，滚动距离等</p>
<table>
<thead>
<tr>
<th align="center">element.scrollTop</th>
<th align="center">返回被卷去的上侧距离，返回值不带单位</th>
</tr>
</thead>
<tbody><tr>
<td align="center">element.scrollLeft</td>
<td align="center">返回被卷去的左侧距离，返回值不带单位</td>
</tr>
<tr>
<td align="center">element.scrollWidth</td>
<td align="center">返回自身实际的宽度，不含边框，</td>
</tr>
<tr>
<td align="center">element.scrollHeight</td>
<td align="center">返回自身实际的高度，不含边框，</td>
</tr>
</tbody></table>
<p>​    </p>
<table>
<thead>
<tr>
<th align="center">页面被卷去的头部</th>
<th align="center">window.pageYOffset</th>
</tr>
</thead>
<tbody><tr>
<td align="center">页面被卷去的左侧</td>
<td align="center">window.pageXOffset</td>
</tr>
</tbody></table>
<p>三大系列总结</p>
<ol>
<li>offset系列经常用于获得元素位置    offsetLeft         offsetTop</li>
<li>client经常用于获取元素大小        clientWidth   clientHeight</li>
<li>scroll经常用于获取滚动距离        scrollTop         scrollLeft</li>
<li>注意页面滚动的距离通过window.pageXOffset获得</li>
</ol>
<p>mouseenter和mouseover<br>    当鼠标移动到元素上时就会触发mouseenter事件<br>    类似mouseover，它们两者之间的差别是<br>    mouseover鼠标经过自身盒子会触发，经过子盒子也会触发，mouseenter只有经过自身盒子才触发<br>    因为mouseenter不会冒泡</p>
<pre><code>window.scroll(x,y)
    滚动窗口至文档中特定位置</code></pre><p>移动端：<br>    手指触摸DOM元素事件：touchstart<br>    手指在DOM元素身上移动：touchmove<br>    手指离开DOM元素事件：touchend</p>
<pre><code>触摸事件对象：
    touches：正在触摸屏幕的所有手指的列表
    targetTouches：正在触摸当前DOM元素的手指列表
    如果侦听的是一个DOM元素，他们两个是一样的
    changedTouches手指状态发生了改变的列表 从无到有 或者 从有到无
    因为我们一般都是触摸元素，所以经常使用的是 targetTouches</code></pre>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/2020/04/27/SpringBoot/</url>
    <content><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h1 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h1><ul>
<li>简化Spring应用开发的一个框架；</li>
<li>整个Spring技术栈的一个大整合</li>
<li>J2EE开发的一站式解决方案</li>
</ul>
<h1 id="2、原理"><a href="#2、原理" class="headerlink" title="2、原理"></a>2、原理</h1><p>自动装配：</p>
<h2 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h2><ul>
<li><p>spring-boot-dependencies：核心依赖在父工程</p>
</li>
<li><p>我们在写或者引入一些springBoot依赖的时候，不需要指定版本，就因为有这些版本仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>


</li>
</ul>
<p><strong>启动器</strong></p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>启动器：说白了就是Springboot的启动场景</p>
</li>
<li><p>比如spring-boot-starter-web，他会帮我们自动导入web环境所有的依赖</p>
</li>
<li><p>springboot会将所有的功能场景，都变成一个个的启动器</p>
</li>
<li><p>我们要使用什么功能，就只需要找到对应的启动器就可以了<code>starter</code></p>
</li>
</ul>
<p><strong>打包插件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2、主程序"><a href="#2、主程序" class="headerlink" title="2、主程序"></a>2、主程序</h2><ul>
<li><p>@SpringBootApplication ：标注这个类是一个springboot的应用，说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123; <span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">		@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>@SpringBootConfiguratin ：Spring Boot的配置类；标注在某个类上，表示这是一个Spring Boot的配置类</p>
<ul>
<li><p>@Configuration：配置类上来标注这个注解；</p>
<p>配置类—配置文件</p>
<p>配置类也是容器中的一个组件，@Component</p>
</li>
</ul>
</li>
<li><p>@EnableAutoConfiguration：开启自动配置功能</p>
<p>​    以前我们需要配置的东西，Spring Boot帮我们自动配置；此注解告诉Spring Boot开启自动配置功能，这样自动配置才能生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="meta">@Import</span>(AutoConfigurationImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableAutoConfiguration</span> </span>&#123;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>@AutoConfigurationPackage ：自动配置包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import</span>(AutoConfigurationPackages.Registrar<span class="class">.<span class="keyword">class</span>)</span></span><br></pre></td></tr></table></figure>

<p>Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class管理</p>
<p>==将主配置类（@SpringBootApplication标注的类）所在的包及下面所有的子包里面的所有组件扫描到Spring容器==</p>
</li>
<li><p>@Import(AutoConfigurationImportSelector.class)：给容器导入组件</p>
<ul>
<li><p>AutoConfigurationImportSelector ：导入哪些组件的选择器</p>
<p>将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p>
<p>会给容器中导入非常多的自动装配类（xxxAutoConfiguration）;就是给容器中导入这个场景需要的所有组件，并配置好这些组件。</p>
</li>
<li><p>Spring Boot在启动的时候从类路径下的META/INF/spring.factories中获取EnableAutoConfiguretion指定的值，将这些值作为自动装配类导入容器中，帮我们进行自动装配工作；以前我们需要自己配置的东西，自动装配类都帮我们搞定了</p>
<p>J2EE的整体整合解决方案和自动装配都在spring-boot-autoconfigure-2.2.6.RELEASE.jar</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="3、-快速创建Spring-Boot-项目"><a href="#3、-快速创建Spring-Boot-项目" class="headerlink" title="3、 快速创建Spring Boot 项目"></a>3、 快速创建Spring Boot 项目</h1><p>​    默认生成的Spring Boot项目：</p>
<ul>
<li>主程序已经生成好了，我们只需要自己的逻辑</li>
<li>resources文件夹中的目录结构<ul>
<li>static：保存所有的静态资源；js css images;</li>
<li>templates：保存所有的模板页面（Spring Boot moren jar包使用嵌入式的Tomcat，默认不支持jsp页面）；可以使用模板引擎（freemarker、thymekeaf）</li>
<li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li>
</ul>
</li>
</ul>
<h1 id="4、Spring-Boot的配置"><a href="#4、Spring-Boot的配置" class="headerlink" title="4、Spring Boot的配置"></a>4、Spring Boot的配置</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot 使用一个全局的配置文件，名是固定的</p>
<ul>
<li>application.properties</li>
<li>application.yml</li>
</ul>
<p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p>
<p>YAML（YAML Ain’t Markup :anguage）</p>
<p>​            YAML A Markup Language：是一个标记语言</p>
<p>​            YAML isn’t Markup Language：不是一个标记语言</p>
<p>标记语言：</p>
<p>​    以前的配置文件；大多使用的是xxx.xml文件</p>
<p>​    YAML：以数据为中心，比json、xml等更适合做配置文件</p>
<p>​    YAML：配置例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br></pre></td></tr></table></figure>

<h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>K:(空格)V：表示一对键值对（空格必须有）；</p>
<p>以空格的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/hello</span></span><br></pre></td></tr></table></figure>

<p>属性和值也是大小写敏感的</p>
<h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><ol>
<li><p>字面量：普通的值（数字、字符串、布尔）</p>
<p>k: v ：直接写；</p>
</li>
</ol>
<p>​        字符串默认不用加上单引号或者双引号；</p>
<p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p>
<p>​            name : “zhangsan \n lisi”    输出；zhangsan 换行 lisi</p>
<p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p>
<p>​            name : “zhangsan \n lisi”    输出；zhangsan \n lisi</p>
<ol start="2">
<li><p>对象、Map（属性和值）（键值对）：</p>
<p>k: v ；在下一行来写对象的属性和值的关系；注意缩进</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span></span><br><span class="line">		<span class="attr">lastName:</span> <span class="string">zhangsan</span></span><br><span class="line">		<span class="attr">age:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>行内写法：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">friends:</span> <span class="string">&#123;lastName:</span> <span class="string">zhangsan,age:</span> <span class="number">19</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组（List、Set）</p>
<p>用 - 值表示数组中的一个元素</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cat</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">dog</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pig</span></span><br></pre></td></tr></table></figure>

<p>行内写法</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> <span class="string">[cat,dog,pig]</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><h3 id="方式一、yml配置文件"><a href="#方式一、yml配置文件" class="headerlink" title="方式一、yml配置文件"></a>方式一、yml配置文件</h3><ol>
<li><p>配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhaoning</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">21</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">asd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">wer</span></span><br><span class="line">  <span class="attr">map:</span></span><br><span class="line">    <span class="attr">hobby:</span> <span class="string">lanqiu</span></span><br><span class="line">    <span class="attr">xihuan:</span> <span class="string">chi</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">小狗</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 将配置文件中配置的每一个属性的值，映射到这个组件中</span></span><br><span class="line"><span class="comment">* @ConfigurationProperties(prefix = "person")：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定；</span></span><br><span class="line"><span class="comment">* prefix = "person":配置文件中哪个下面的所有属性进行一一映射</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 只有这个组件是容器中的组件，才能使用容器提供的功能；比如@ConfigurationProperties(prefix = "person")</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; map;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;Object&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--      导入配置文件处理器，配置文件进行绑定就会有提示  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="方式二、properties配置文件"><a href="#方式二、properties配置文件" class="headerlink" title="方式二、properties配置文件"></a>方式二、properties配置文件</h3><p>配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person.name&#x3D;张三</span><br><span class="line">person.age&#x3D;13</span><br><span class="line">person.list&#x3D;asdf,234,562,gs</span><br><span class="line">person.map.k1&#x3D;v1</span><br><span class="line">person.map.k2&#x3D;asdf</span><br><span class="line">person.dog.name&#x3D;小狗</span><br><span class="line">person.dog.age&#x3D;2</span><br></pre></td></tr></table></figure>

<p>其余不变</p>
<h3 id="方式三、value注入"><a href="#方式三、value注入" class="headerlink" title="方式三、value注入"></a>方式三、value注入</h3><table>
<thead>
<tr>
<th></th>
<th align="center">@ConfigurationProperties</th>
<th align="center">@value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td align="center">批量注入配置文件中的属性</td>
<td align="center">一个个指定</td>
</tr>
<tr>
<td>松散绑定</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td align="center">不支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td align="center">支持</td>
<td align="center">不支持</td>
</tr>
</tbody></table>
<p>配置文件yml还是properties他们都能获取到值</p>
<p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value</p>
<p>如果说，我们专门编写了一个JavaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties  </p>
<p><strong>配置文件注入值数据校验</strong></p>
<p>类上加@Validated</p>
<h3 id="PropertySource、-ImprotResource"><a href="#PropertySource、-ImprotResource" class="headerlink" title="@PropertySource、@ImprotResource"></a>@PropertySource、@ImprotResource</h3><ol>
<li><p>@PropertySource：加载指定的配置文件；</p>
<p>@PropertySource(value = {“classpath:xxx.properties”})</p>
</li>
<li><p>@ImprotResource：导入Spring的配置文件，让配置文件里的内容生效；</p>
<p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件也不能自动shib；</p>
<p>想让Spring的配置文件生效，加载进来；<code>@ImprotResource</code>标注在一个配置类上</p>
</li>
</ol>
<p>Spring Boot 推荐给容器中添加组件的方式；推荐使用全注解的方式</p>
<p>1、配置类——Spring配置文件</p>
<p>2、使用@Bean给容器中添加组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中，容器中这个组件默认的的id就是方法名</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloConfig <span class="title">helloConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloConfig();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4、-配置文件占位符"><a href="#4、-配置文件占位符" class="headerlink" title="4、 配置文件占位符"></a>4、 配置文件占位符</h2><ul>
<li><p>配置文件中可以使用随机数</p>
<ul>
<li>${random.value}</li>
<li>${random.int}</li>
<li>${random.long}</li>
<li>${random.int(10)}</li>
<li>${random.int[1024,65536]}</li>
</ul>
</li>
<li><p>属性配置占位符</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">app.name=MyApp</span></span><br><span class="line"><span class="string">app.description=$&#123;app.name&#125;</span> <span class="string">is</span> <span class="string">a</span> <span class="string">Spring</span> <span class="string">Boot</span> <span class="string">application</span></span><br></pre></td></tr></table></figure>

<p>可以在配置文件中引用前面配置过的属性（优先级前面配置过的都能用）</p>
<p>${app.name:默认值} 来指定找不到属性时的默认值</p>
</li>
</ul>
<h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是application-{profile}.properties/yml</p>
<p>默认使用application.properties的配置；</p>
<h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><ul>
<li><p>在配置文件中指定spring.profiles.active=xxx</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>命令行：</p>
<ul>
<li><p>–spring.profiles.active=xxx</p>
<p>可以直接在测试的时候，配置传入命令行参数</p>
</li>
</ul>
</li>
<li><p>虚拟机参数：</p>
<p>​    -Dspring.profiles.active=xxx</p>
</li>
</ul>
<h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>Spring Boot启动会扫描以下位置的application.properties或者application.yml文件作为Spring Boot的默认配置文件</p>
<ol>
<li>file:./config/</li>
<li>file:./</li>
<li>classpath:/config/</li>
<li>classpath:/</li>
</ol>
<p>以上是按照优先级从高到低的顺序，所有位置的文件都会被加载，高优先级配置内容会覆盖低优先级配置内容</p>
<p>我们也可以通过配置spring.config.location来改变默认配置（命令行模式）</p>
<h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p>Spring Boot 也可以从以下位置加载配置；优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</p>
<ol>
<li><p>==命令行参数==</p>
<p>java -jar xxx.jar –server.port=8087 –server.context-path=/asd</p>
</li>
<li><p>来自java:comp/env的NDI属性</p>
</li>
<li><p>Java系统属性（System.getProperties()）</p>
</li>
<li><p>操作系统环境变量</p>
</li>
<li><p>RandomValuePropertySource配置的random.*属性值</p>
</li>
<li><p>==jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件==</p>
</li>
<li><p>==jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件==</p>
</li>
<li><p>==jar包外部的application.properties或application.yml(不带spring.profile)配置文件==</p>
</li>
<li><p>==jar包内部的application.properties或application.yml(不带spring.profile)配置文件==</p>
</li>
<li><p>@Configuration注解类上的@PropertySource</p>
</li>
<li><p>通过SpringApplication.setDefaultProperties指定的默认属性</p>
</li>
<li><p>所有支持的配置加载来源</p>
</li>
</ol>
<h2 id="8、自动配置"><a href="#8、自动配置" class="headerlink" title="8、自动配置"></a>8、自动配置</h2><h3 id="1、自动配置原理"><a href="#1、自动配置原理" class="headerlink" title="1、自动配置原理"></a>1、自动配置原理</h3><p>配置文件到底能写什么？怎么写？自动配置原理</p>
<ol>
<li><p>SpringBoot启动的时候加载主配置类，开启了自动配置功@EnableAutoConfiguration</p>
</li>
<li><p>@EnableAutoConfiguration的作用：</p>
<ol>
<li><p>利用AutoConfigurationImportSelector给容器中导入一些组件</p>
</li>
<li><p>详细可以查看selectImports方法中的内容，可以看导入那些组件</p>
</li>
<li><p>List<String> configurations = getCandidateConfigurations(annotationMetadata, attributes);获取候选的配置</String></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(),</span><br><span class="line">      getBeanClassLoader());</span><br><span class="line"><span class="comment">//扫描所有jar包类路径下 META-INF/spring.factories</span></span><br><span class="line"><span class="comment">//把扫描到的这些文件的内容包装成properties对象</span></span><br><span class="line"><span class="comment">//从properites中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<p><strong>将类路径下 META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中</strong></p>
<p>每一个这样的xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p>
<ol start="3">
<li><p>每一个自动配置类进行自动配置的功能</p>
</li>
<li><p>以<strong>HttpEncodingAutoConfiguration</strong>为例解释自动配置原理；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示这是一个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="comment">//启用ConfigurationProperties；将配置文件中对应的值和HttpProperties绑定起来；并把HttpProperties加入到ioc容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(HttpProperties<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//<span class="title">Spring</span>底层@<span class="title">Conditional</span>，根据不同条件，如果满足指定的条件，整个配置类里面的配置才会生效；</span></span><br><span class="line"><span class="class">//判断当前应用是否是<span class="title">web</span>应用，如果是，当前配置类生效</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnWebApplication</span>(<span class="title">type</span> </span>= ConditionalOnWebApplication.Type.SERVLET)</span><br><span class="line"><span class="comment">//判断当前项目有没有这个类</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(CharacterEncodingFilter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">//判断配置文件中是否存在某个配置，<span class="title">spring</span>.<span class="title">http</span>.<span class="title">encoding</span>.<span class="title">enabled</span>；如果不存在，判断也是成立的</span></span><br><span class="line"><span class="class">//即使我们配置问价中不配置<span class="title">spring</span>.<span class="title">http</span>.<span class="title">encoding</span>.<span class="title">enabled</span>，也是默认生效的</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">prefix</span> </span>= <span class="string">"spring.http.encoding"</span>, value = <span class="string">"enabled"</span>, matchIfMissing = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpEncodingAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">//他已经和Spring Boot的配置文件映射了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HttpProperties.Encoding properties;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">//只有一个有参构造器的情况下，参数的值就会从容器中拿</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HttpEncodingAutoConfiguration</span><span class="params">(HttpProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.properties = properties.getEncoding();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//给容器中添加一个组件，这个组件，这个组件的某些值需要从properties中获取</span></span><br><span class="line">	<span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CharacterEncodingFilter <span class="title">characterEncodingFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		CharacterEncodingFilter filter = <span class="keyword">new</span> OrderedCharacterEncodingFilter();</span><br><span class="line">		filter.setEncoding(<span class="keyword">this</span>.properties.getCharset().name());</span><br><span class="line">		filter.setForceRequestEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.REQUEST));</span><br><span class="line">		filter.setForceResponseEncoding(<span class="keyword">this</span>.properties.shouldForce(Type.RESPONSE));</span><br><span class="line">		<span class="keyword">return</span> filter;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><strong>根据当前不同的条件判断，决定这个配置类是否生效？</strong></p>
<p>一但这个配置类生效，这个配置类就会个容器中添加各种组件，这些组件的属性是从对应的properties类中获取的，</p>
<p>这些类里面的每一个属性又是和配置文件绑定的</p>
<ol start="5">
<li>所有在配置文件中能配置的属性都是在xxxProperties类中封装着；配置文件能配置什么就可以参照某个功能对应的这个属性类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从配置文件中获取指定的值和bean的属性进行绑定 </span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.http"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProperties</span> </span>&#123;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>精髓：</p>
<ol>
<li>SpringBoot启动会加载大量的自动配置类</li>
<li>我们看我们需要的功能有没有SpringBoot默认写好的自动配置类</li>
<li>我们再来看这个自动配置类中到底配置了那些组件；（只要我们要用的组件有，我们就不需要配置了）</li>
<li>给容器中自动配置类添加组件的时候，会从properties类中获取某些属性，我们就可以在配置文件中指定这些属性的值；</li>
</ol>
<p>xxxAutoConfiguration：自动配置类</p>
<p>给容器中添加组件</p>
<p>xxxProperties：封装配置文件中相关的属性</p>
<h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h3 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h3><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置里面的所有内容才生效；</p>
<table>
<thead>
<tr>
<th>@Confitional扩展注解</th>
<th>作用（判断是否满足当前指定条件）</th>
</tr>
</thead>
<tbody><tr>
<td>@ConfitionalOnJava</td>
<td>系统的java版本是否符合要求</td>
</tr>
<tr>
<td>@ConfitionalOnBean</td>
<td>容器中存在指定Bean</td>
</tr>
<tr>
<td>@ConfitionalOnMissingBean</td>
<td>容器中不存在指定Bean</td>
</tr>
<tr>
<td>@ConfitionalOnExpression</td>
<td>满足SpEL表达式指定</td>
</tr>
<tr>
<td>@ConfitionalOnClass</td>
<td>系统中有指定的类</td>
</tr>
<tr>
<td>@ConfitionalOnMissClass</td>
<td>系统中没有指定的类</td>
</tr>
<tr>
<td>@ConfitionalOnSingleCandidate</td>
<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>
</tr>
<tr>
<td>@ConfitionalOnProperty</td>
<td>系统中指定的属性是否有指定的值</td>
</tr>
<tr>
<td>@ConfitionalOnResource</td>
<td>类路径下是否存在指定资源文件</td>
</tr>
<tr>
<td>@ConfitionalOnWebApplication</td>
<td>当前是web环境</td>
</tr>
<tr>
<td>@ConfitionalOnNotWebApplication</td>
<td>当前不是web环境</td>
</tr>
<tr>
<td>@ConditionalOnlndi</td>
<td>INDI存在制定项</td>
</tr>
</tbody></table>
<p>自动配置类必须在一定条件下才能生效；</p>
<p>我们怎么知道哪些自动配置类生效了</p>
<p>我们可以通过启用 debug=true属性；来让控制台打印自动配置报告，这样我们就可以很方便的知道那些自动配置类生效；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">============================</span><br><span class="line">CONDITIONS EVALUATION REPORT</span><br><span class="line">============================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Positive matches:（自动配置类启用的）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnProperty</span> (spring.aop.auto=<span class="keyword">true</span>) matched (OnPropertyCondition)</span><br><span class="line"></span><br><span class="line">   AopAutoConfiguration.ClassProxyingConfiguration matched:</span><br><span class="line">      - <span class="meta">@ConditionalOnMissingClass</span> did not find unwanted <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">aspectj</span>.<span class="title">weaver</span>.<span class="title">Advice</span>' (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class">      - @<span class="title">ConditionalOnProperty</span> (<span class="title">spring</span>.<span class="title">aop</span>.<span class="title">proxy</span>-<span class="title">target</span>-<span class="title">class</span></span>=<span class="keyword">true</span>) matched (OnPropertyCondition)</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">Negative matches:（没有启动自动配置类）</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">   ActiveMQAutoConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required <span class="class"><span class="keyword">class</span> '<span class="title">javax</span>.<span class="title">jms</span>.<span class="title">ConnectionFactory</span>' (<span class="title">OnClassCondition</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">   AopAutoConfiguration.AspectJAutoProxyingConfiguration:</span><br><span class="line">      Did not match:</span><br><span class="line">         - <span class="meta">@ConditionalOnClass</span> did not find required <span class="class"><span class="keyword">class</span> '<span class="title">org</span>.<span class="title">aspectj</span>.<span class="title">weaver</span>.<span class="title">Advice</span>' (<span class="title">OnClassCondition</span>)</span></span><br></pre></td></tr></table></figure>



<h1 id="5、日志"><a href="#5、日志" class="headerlink" title="5、日志"></a>5、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p>市面上的日志框架：</p>
<ul>
<li>JCL（Jakarta Commons Logging）</li>
<li>SLF4j（Simplie Logging Facade for Java）</li>
<li>Jboss-logging</li>
<li>Log4j</li>
<li>JUL（java.util.longging）</li>
<li>Log4j2</li>
<li>Logback</li>
</ul>
<table>
<thead>
<tr>
<th>日志门面（日志的抽象层）</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td><del>JCL（Jakarta Commons Logging）</del>；<strong>SLF4j（Simplie Logging Facade for Java）</strong>；<del>Jboss-logging</del></td>
<td>Log4j ；JUL（java.util.longging）； Log4j2；<strong>Logback</strong></td>
</tr>
</tbody></table>
<p>左边选一个门面（抽象层），右边选一个实现</p>
<p>日志门面：SLF4j</p>
<p>日志实现：Logback</p>
<p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；</p>
<p>SpringBoot选用SLF4和logback；</p>
<h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j"><a href="#1、如何在系统中使用SLF4j" class="headerlink" title="1、如何在系统中使用SLF4j"></a>1、如何在系统中使用SLF4j</h3><p>以后开发的时候，日志记录方法的调用，不应该直接调用日志的实现类，而是调用日志的抽象层里面的方法</p>
<ol>
<li>给系统里面导入slf4j的jar和logback的实现jar</li>
</ol>
<p><img src="/2020/04/27/SpringBoot/concrete-bindings.png" alt="concrete-bindings"></p>
<ol start="2">
<li><p>使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Logger logger = LoggerFactory.getLogger(HelloWorld<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    logger.info(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>每一个日志的实现框架都有自己的配置文件，使用slf4j以后，配置文件还是做成日志实现框架自己本身的配置文件</p>
<h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a(slf4j + logback) : Spring(commons-logging) hibernate(jboss-logging)</p>
<p>统一日志记录，即使是别的框架，和我一起统一使用slf4j进行输出<img src="/2020/04/27/SpringBoot/legacy.png" alt="legacy"></p>
<p><strong>如何让系统中所有的日志都统一到slf4j</strong></p>
<ol>
<li>将系统中其他日志框架先排除出去</li>
<li>用中间包来替换原有的日志框架</li>
<li>我们导入slf4j其他的实现</li>
</ol>
<h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><p>SpringBoot的日志底层依赖关系</p>
<p><img src="/2020/04/27/SpringBoot/%E6%97%A5%E5%BF%97%E7%9A%84%E5%AE%9E%E7%8E%B0.png" alt="日志的实现"></p>
<p>总结：</p>
<ul>
<li><p>SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p>
</li>
<li><p>SpringBoot也把其他的日志都替换成了slf4j</p>
</li>
<li><p>中间替换包是什么？偷梁换柱</p>
</li>
<li><p>如果我们要引入其他框架，一定要把这个框架的默认日志依赖移除掉</p>
</li>
</ul>
<p>  SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉、</p>
<h2 id="4、日志使用"><a href="#4、日志使用" class="headerlink" title="4、日志使用"></a>4、日志使用</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line"> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日志的级别</span></span><br><span class="line">    <span class="comment">//由高到低</span></span><br><span class="line">    logger.trace(<span class="string">"xxx"</span>);</span><br><span class="line">    logger.debug(<span class="string">"xxx"</span>);</span><br><span class="line">    <span class="comment">//springBoot默认给我们使用的是info级别的</span></span><br><span class="line">    <span class="comment">//没有指定级别的就用SpringBoot默认规定的级别：root</span></span><br><span class="line">    logger.info(<span class="string">"xxx"</span>);</span><br><span class="line">    logger.warn(<span class="string">"xxx"</span>);</span><br><span class="line">    logger.error(<span class="string">"xxx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">日志输出格式：</span><br><span class="line">	%d 表示日期时间</span><br><span class="line">	%thread 表示线程名</span><br><span class="line">	%-5level 级别从左显示5个字符宽度</span><br><span class="line">	%logger&#123;50&#125; 表示logger名字最长50个字符，否字按照句点分隔</span><br><span class="line">	%msg 日志消息</span><br><span class="line">	%n 换行</span><br><span class="line"></span><br><span class="line">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><br></pre></td></tr></table></figure>



<p>SpringBoot修改日志的默认配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置日志输出级别</span></span><br><span class="line"><span class="meta">logging.level.com.zhaoning</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不指定路径在当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="comment">#可以指定完整的路径</span></span><br><span class="line"><span class="comment">#logging.file=E:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用spring.log作为默认文件</span></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string">/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></span><br></pre></td></tr></table></figure>





<h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可，springBoot就不使用他默认配置了</p>
<table>
<thead>
<tr>
<th align="left">Logging System</th>
<th align="left">Customization</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Logback</td>
<td align="left"><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, or <code>logback.groovy</code></td>
</tr>
<tr>
<td align="left">Log4j2</td>
<td align="left"><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td>
</tr>
<tr>
<td align="left">JDK (Java Util Logging)</td>
<td align="left"><code>logging.properties</code></td>
</tr>
</tbody></table>
<p>logback-xml：直接就被日志框架识别了</p>
<p>lobback-spring.xml：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"staging"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span></span><br><span class="line">    可以指定某段配置只在某个环境下生效</span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h1 id="6、web开发"><a href="#6、web开发" class="headerlink" title="6、web开发"></a>6、web开发</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>使用SpringBoot：</p>
<ol>
<li>创建SpringBoot应用，选中我们需要的模块</li>
<li>SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</li>
<li>自己编写业务代码</li>
</ol>
<h2 id="2、SpringBoot对静态资源的映射规则"><a href="#2、SpringBoot对静态资源的映射规则" class="headerlink" title="2、SpringBoot对静态资源的映射规则"></a>2、SpringBoot对静态资源的映射规则</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Default resource handling disabled"</span>);</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			Duration cachePeriod = <span class="keyword">this</span>.resourceProperties.getCache().getPeriod();</span><br><span class="line">			CacheControl cacheControl = <span class="keyword">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl();</span><br><span class="line">			<span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">"/webjars/**"</span>)) &#123;</span><br><span class="line">				customizeResourceHandlerRegistration(registry.addResourceHandler(<span class="string">"/webjars/**"</span>)</span><br><span class="line">						.addResourceLocations(<span class="string">"classpath:/META-INF/resources/webjars/"</span>)</span><br><span class="line">						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">			&#125;</span><br><span class="line">			String staticPathPattern = <span class="keyword">this</span>.mvcProperties.getStaticPathPattern();</span><br><span class="line">			<span class="keyword">if</span> (!registry.hasMappingForPattern(staticPathPattern)) &#123;</span><br><span class="line">				customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern)</span><br><span class="line">						.addResourceLocations(getResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations()))</span><br><span class="line">						.setCachePeriod(getSeconds(cachePeriod)).setCacheControl(cacheControl));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="function"><span class="keyword">private</span> Integer <span class="title">getSeconds</span><span class="params">(Duration cachePeriod)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> (cachePeriod != <span class="keyword">null</span>) ? (<span class="keyword">int</span>) cachePeriod.getSeconds() : <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>



<ol>
<li><p>所有/webjars/**，都去classpath:/META-INF/resources/webjars/找资源；</p>
<p>webjars：以jar包的方式引入静态资源</p>
</li>
</ol>
<p><img src="/2020/04/27/SpringBoot/webjars.png" alt="webjars"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jquery-webjar--&gt;</span> 在访问的时候，只需要写webjars下面资源的名称即可        </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li><p>“/**” 访问当前项目的任何资源（静态资源的文件夹）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"classpath:/META-INF/resources"</span></span><br><span class="line"><span class="string">"classpath:/resources/"</span></span><br><span class="line"><span class="string">"classpath:/static/"</span></span><br><span class="line"><span class="string">"classpath:/public/"</span></span><br><span class="line"> <span class="string">"/"</span>:当前项目的根路径</span><br></pre></td></tr></table></figure>

<p>locathost:8080/asd == 去静态资源文件夹里面找asd</p>
</li>
</ol>
<ol start="3">
<li><p>欢迎页：静态资源文件夹下的所有index.html页面；被”/**”映射；</p>
<p>localhost:8080/    找index页面</p>
</li>
<li><p>所有的**/favicon.ico都是在静态资源文件下找</p>
</li>
</ol>
<h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p>
<p><img src="/2020/04/27/SpringBoot/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.jpg" alt="模板引擎"></p>
<p>SpringBoot推荐的Thymekeaf</p>
<p>语法更简单，功能更强大</p>
<h3 id="1、-引入thymeleaf"><a href="#1、-引入thymeleaf" class="headerlink" title="1、 引入thymeleaf;"></a>1、 引入thymeleaf;</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>切换thymeleaf版本</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 布局功能的支持程序，thymekeaf3主程序，layout2以上版本--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf2  layout1--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2、Thymeleaf使用-amp-语法"><a href="#2、Thymeleaf使用-amp-语法" class="headerlink" title="2、Thymeleaf使用&amp;语法"></a>2、Thymeleaf使用&amp;语法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.thymeleaf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThymeleafProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_ENCODING = StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_PREFIX = <span class="string">"classpath:/templates/"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SUFFIX = <span class="string">".html"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//只要我们把html页面放在classpath:/templates/，thymeleaf就能自动渲染</span></span><br></pre></td></tr></table></figure>

<p>使用：</p>
<ol>
<li><p>导入thymeleaf的命名空间</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用thymeleaf语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>成功！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"$&#123;hello&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><ol>
<li><p><img src="/2020/04/27/SpringBoot/th%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.png" alt="th基本语法"></p>
</li>
<li><p>表达式</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">Simple</span> <span class="string">expressions:(表达式语法)</span></span><br><span class="line">	<span class="attr">Variable</span> <span class="string">Expressions: $&#123;...&#125;  获取变量值；OFNL</span></span><br><span class="line">		<span class="attr">1、获取对象的属性，调用方法</span></span><br><span class="line">		<span class="attr">2、使用内置的基本对象</span></span><br><span class="line"><span class="comment">		#ctx : the context object. #vars: the context variables. </span></span><br><span class="line"><span class="comment">		#locale : the context locale. </span></span><br><span class="line"><span class="comment">		#request : (only in Web Contexts) the HttpServletRequest object. </span></span><br><span class="line"><span class="comment">		#response : (only in Web Contexts) the HttpServletResponse object. </span></span><br><span class="line"><span class="comment">		#session : (only in Web Contexts) the HttpSession object. </span></span><br><span class="line"><span class="comment">		#servletContext : (only in Web Contexts) the ServletContext object.</span></span><br><span class="line">		<span class="attr">3、内置的一些工具对象：</span></span><br><span class="line"><span class="comment">#execInfo : information about the template being processed. </span></span><br><span class="line"><span class="comment">#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #&#123;…&#125; syntax. </span></span><br><span class="line"><span class="comment">#uris : methods for escaping parts of URLs/URIs</span></span><br><span class="line"><span class="comment">#conversions : methods for executing the configured conversion service (if any). </span></span><br><span class="line"><span class="comment">#dates : methods for java.util.Date objects: formatting, component extraction, etc. </span></span><br><span class="line"><span class="comment">#calendars : analogous to #dates , but for java.util.Calendar objects. </span></span><br><span class="line"><span class="comment">#numbers : methods for formatting numeric objects. </span></span><br><span class="line"><span class="comment">#strings : methods for String objects: contains, startsWith, prepending/appending, etc. </span></span><br><span class="line"><span class="comment">#objects : methods for objects in general. #bools : methods for boolean evaluation. </span></span><br><span class="line"><span class="comment">#arrays : methods for arrays. #lists : methods for lists. #sets : methods for sets.</span></span><br><span class="line"><span class="comment">#maps : methods for maps. #aggregates : methods for creating aggregates on arrays or collections. </span></span><br><span class="line"><span class="comment">#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).</span></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	<span class="attr">Selection</span> <span class="string">Variable Expressions: *&#123;...&#125;  选择表达式 和$&#123;&#125;在功能上是一样的</span></span><br><span class="line"><span class="comment">	#补充：配合 th:object="$&#123;session.user&#125;"</span></span><br><span class="line"><span class="comment">	#&lt;div th:object="$&#123;session.user&#125;"&gt;    </span></span><br><span class="line"><span class="comment">	#	&lt;p&gt;Name: &lt;span th:text="*&#123;firstName&#125;"&gt; Sebastian&lt;/span&gt;.&lt;/p&gt;    </span></span><br><span class="line"><span class="comment">	#	&lt;p&gt;Surname: &lt;span th:text="*&#123;lastName&#125;"&gt; Pepper&lt;/span&gt;.&lt;/p&gt;    </span></span><br><span class="line"><span class="comment">	#	&lt;p&gt;Nationality: &lt;span th:text="*&#123;nationality&#125;"&gt; Saturn&lt;/span&gt;.&lt;/p&gt;  </span></span><br><span class="line"><span class="comment">	#&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="attr">Message</span> <span class="string">Expressions: #&#123;...&#125;  获取国际化内容</span></span><br><span class="line">	<span class="attr">Link</span> <span class="string">URL Expressions: @&#123;...&#125;  定义URL</span></span><br><span class="line"><span class="comment">		#&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt; </span></span><br><span class="line"><span class="comment">		#&lt;a href="details.html"</span></span><br><span class="line"><span class="comment">		#th:href="@&#123;http://localhost:8080/gtvg/order/details(orderId=$&#123;o.id&#125;)&#125;"&gt;view&lt;/a&gt;</span></span><br><span class="line"><span class="comment">		#&lt;!-- Will produce '/gtvg/order/details?orderId=3' (plus rewriting) --&gt; </span></span><br><span class="line"><span class="comment">		#&lt;a href="details.html" th:href="@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;"&gt;view&lt;/a&gt;</span></span><br><span class="line">	<span class="attr">Fragment</span> <span class="string">Expressions: ~&#123;...&#125;	片段引用表达式</span></span><br><span class="line"><span class="comment">		#&lt;div th:insert="~&#123;commons :: main&#125;"&gt;...&lt;/div</span></span><br><span class="line"><span class="attr">Literals</span>: <span class="string">(字面量)</span></span><br><span class="line">        <span class="attr">Text</span> <span class="string">literals: 'one text' , 'Another one!' ,… </span></span><br><span class="line">        <span class="attr">Number</span> <span class="string">literals: 0 , 34 , 3.0 , 12.3 ,… </span></span><br><span class="line">        <span class="attr">Boolean</span> <span class="string">literals: true , false </span></span><br><span class="line">        <span class="attr">Null</span> <span class="string">literal: null </span></span><br><span class="line">        <span class="attr">Literal</span> <span class="string">tokens: one , sometext , main ,…</span></span><br><span class="line"><span class="attr">Text</span> <span class="string">operations:（文本操作）</span></span><br><span class="line">        <span class="attr">String</span> <span class="string">concatenation: + </span></span><br><span class="line">        <span class="attr">Literal</span> <span class="string">substitutions: |The name is $&#123;name&#125;|</span></span><br><span class="line"><span class="attr">Arithmetic</span> <span class="string">operations:（数学运算）</span></span><br><span class="line">        <span class="attr">Binary</span> <span class="string">operators: + , - , * , / , % </span></span><br><span class="line">        <span class="attr">Minus</span> <span class="string">sign (unary operator): -</span></span><br><span class="line"><span class="attr">Boolean</span> <span class="string">operations:（布尔运算）</span></span><br><span class="line">        <span class="attr">Binary</span> <span class="string">operators: and , or </span></span><br><span class="line">        <span class="attr">Boolean</span> <span class="string">negation (unary operator): ! , not</span></span><br><span class="line"><span class="attr">Comparisons</span> <span class="string">and equality:（比较运算）</span></span><br><span class="line">        <span class="attr">Comparators</span>: <span class="string">&gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le ) </span></span><br><span class="line">        <span class="attr">Equality</span> <span class="string">operators: == , != ( eq , ne )</span></span><br><span class="line"><span class="attr">Conditional</span> <span class="string">operators:（条件运算）</span></span><br><span class="line">        <span class="meta">If-then</span>: <span class="string">(if) ? (then) </span></span><br><span class="line">        <span class="meta">If-then-else</span>: <span class="string">(if) ? (then) : (else) </span></span><br><span class="line">        <span class="attr">Default</span>: <span class="string">(value) ?: (defaultvalue)</span></span><br><span class="line"><span class="attr">Special</span> <span class="string">tokens:</span></span><br><span class="line">		<span class="meta">No-Operation</span>: <span class="string">_</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="4、Spring-MVC自动配置"><a href="#4、Spring-MVC自动配置" class="headerlink" title="4、Spring MVC自动配置"></a>4、Spring MVC自动配置</h2><h3 id="1、自动配置"><a href="#1、自动配置" class="headerlink" title="1、自动配置"></a>1、自动配置</h3><p>Spring Boot 自动配置好了SpringMVC</p>
<p>以下是SpringBoot对SpringMVC的默认</p>
<ul>
<li>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.<ul>
<li>自动配置了ViewResolver（试图解析器：根据方法的返回值得到试图对象（View），试图对象决定如何渲染(转发或重定向)）</li>
<li>ContentNegotiatingViewResolver 组合所有试图解析器的</li>
<li>==如何定制：我们可以自己给容器中添加一个试图解析器；自动的将其组合进来==</li>
</ul>
</li>
<li>Support for serving static resources, including support for WebJars (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-static-content" target="_blank" rel="noopener">later in this document</a>)).<ul>
<li>静态资源文件夹路径；webjars</li>
</ul>
</li>
<li>自动注册了<code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.<ul>
<li><code>Converter</code> ：转换器；public String hello(User user) 类型转换</li>
<li><code>Formatter</code> ：格式化器；2018.12.13 ===Date；</li>
<li>==自己添加的格式化器，转换器，我们只需要放在容器中即可==</li>
</ul>
</li>
<li>Support for <code>HttpMessageConverters</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-message-converters" target="_blank" rel="noopener">later in this document</a>).<ul>
<li><code>HttpMessageConverters</code> ：SpringMVC用来转换Http请求和响应的；User—json</li>
<li><code>HttpMessageConverters</code> 是从容器中确定，获取所有的HttpMessageConverters</li>
<li>自己给容器中添加，只需要将自己的组件注册到容器中（@Bean/@Component）</li>
</ul>
</li>
<li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-message-codes" target="_blank" rel="noopener">later in this document</a>).</li>
<li>Static <code>index.html</code> support. 静态资源访问</li>
<li>Custom <code>Favicon</code> support (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-favicon" target="_blank" rel="noopener">later in this document</a>).</li>
<li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href="https://docs.spring.io/spring-boot/docs/2.2.6.RELEASE/reference/html/spring-boot-features.html#boot-features-spring-mvc-web-binding-initializer" target="_blank" rel="noopener">later in this document</a>).<ul>
<li>初始化WebDataBinder</li>
<li>请求数据—JavaBean</li>
<li>我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；添加到容器</li>
</ul>
</li>
</ul>
<p>If you want to keep those Spring Boot MVC customizations and make more <a href="https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/web.html#mvc" target="_blank" rel="noopener">MVC customizations</a> (interceptors, formatters, view controllers, and other features), you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurer</code> but <strong>without</strong> <code>@EnableWebMvc</code>.</p>
<p>If you want to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code>, or <code>ExceptionHandlerExceptionResolver</code>, and still keep the Spring Boot MVC customizations, you can declare a bean of type <code>WebMvcRegistrations</code> and use it to provide custom instances of those components.</p>
<p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>, or alternatively add your own <code>@Configuration</code>-annotated <code>DelegatingWebMvcConfiguration</code> as described in the Javadoc of <code>@EnableWebMvc</code>.</p>
<h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><p>==编写一个配置类（@Configuration），继承WebMvcConfigurer接口，不能标注@EnableWebMvc；==</p>
<p>这样既保留了所有的自动配置，也能用我们扩展的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMVCConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/zhaoning"</span>).setViewName(<span class="string">"/asd"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p>
<ol>
<li>SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean/@Component)如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个，将用户配置的和自己默认的组合起来</li>
<li>在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</li>
<li>在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</li>
</ol>
<h1 id="7、CRUD"><a href="#7、CRUD" class="headerlink" title="7、CRUD"></a>7、CRUD</h1><h2 id="一、首页"><a href="#一、首页" class="headerlink" title="一、首页"></a>一、首页</h2><ol>
<li>首页配置：注意点，所有页面的静态资源都需要使用thymeleaf接管，@{}</li>
</ol>
<h2 id="二、页面国际化"><a href="#二、页面国际化" class="headerlink" title="二、页面国际化"></a>二、页面国际化</h2><ol>
<li><p>页面国际化：</p>
<ol>
<li><p>编写国际化配置文件；抽取页面需要显示的国际化消息</p>
<p><img src="/2020/04/27/SpringBoot/%E5%9B%BD%E9%99%85%E5%8C%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="国际化配置文件"></p>
</li>
<li><p>SpringBoot自动配置好了管理国际化资源文件的组件</p>
<p>我们的配置文件可以直接放在类路径下messages.properties;</p>
<p>可以通过编写配置文件修改路径  spring.messages.basename=i18n.login</p>
</li>
<li><p>设置properties编码</p>
</li>
<li><pre><code class="html"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>
<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span>
    <span class="tag">&lt;<span class="name">head</span>&gt;</span>
        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span>
        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span>
        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span>
        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span>
        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Signin Template for Bootstrap<span class="tag">&lt;/<span class="name">title</span>&gt;</span>
        <span class="comment">&lt;!-- Bootstrap core CSS --&gt;</span>
        <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@{/css/bootstrap.min.css} "</span>  <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span>
        <span class="comment">&lt;!-- Custom styles for this template --&gt;</span>
        <span class="tag">&lt;<span class="name">link</span> <span class="attr">th:href</span>=<span class="string">"@{/css/signin.css}"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>

    <span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>
        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-signin"</span> <span class="attr">action</span>=<span class="string">"dashboard.html"</span>&gt;</span>
            <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"mb-4"</span> <span class="attr">th:src</span>=<span class="string">"@{/img/bootstrap-solid.svg}"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"72"</span> <span class="attr">height</span>=<span class="string">"72"</span>&gt;</span>
            <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"h3 mb-3 font-weight-normal"</span> <span class="attr">th:text</span>=<span class="string">"#{login.tip}"</span>&gt;</span>Please sign in<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>
            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#{login.username}"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span>
            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Username"</span> <span class="attr">th:placeholder</span>=<span class="string">"#{login.username}"</span> <span class="attr">required</span>=<span class="string">""</span> <span class="attr">autofocus</span>=<span class="string">""</span>&gt;</span>
            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">th:text</span>=<span class="string">"#{login.password}"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span>
            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">th:placeholder</span>=<span class="string">"#{login.password}"</span><span class="attr">required</span>=<span class="string">""</span>&gt;</span>
            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox mb-3"</span>&gt;</span>
                <span class="tag">&lt;<span class="name">label</span>&gt;</span>
          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"remember-me"</span>/&gt;</span>[[#{login.remember}]]
        <span class="tag">&lt;/<span class="name">label</span>&gt;</span>
            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>
            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-primary btn-block"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">th:text</span>=<span class="string">"#{login.btn}"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span>
            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mt-5 mb-3 text-muted"</span>&gt;</span>© 2017-2018<span class="tag">&lt;/<span class="name">p</span>&gt;</span>
            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>中文<span class="tag">&lt;/<span class="name">a</span>&gt;</span>
            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-sm"</span>&gt;</span>English<span class="tag">&lt;/<span class="name">a</span>&gt;</span>
        <span class="tag">&lt;/<span class="name">form</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">body</span>&gt;</span>
<span class="tag">&lt;/<span class="name">html</span>&gt;</span>
<span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">效果：根据浏览器语言设置的信息切换了国际化</span><br><span class="line"></span><br><span class="line">原理：</span><br><span class="line"></span><br><span class="line">Locale(区域信息对象)；LocaleResolver(获取区域信息对象)</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">		@Bean</span><br><span class="line">		@ConditionalOnMissingBean</span><br><span class="line">		@ConditionalOnProperty(prefix &#x3D; &quot;spring.mvc&quot;, name &#x3D; &quot;locale&quot;)</span><br><span class="line">		public LocaleResolver localeResolver() &#123;</span><br><span class="line">			if (this.mvcProperties.getLocaleResolver() &#x3D;&#x3D; WebMvcProperties.LocaleResolver.FIXED) &#123;</span><br><span class="line">				return new FixedLocaleResolver(this.mvcProperties.getLocale());</span><br><span class="line">			&#125;</span><br><span class="line">			AcceptHeaderLocaleResolver localeResolver &#x3D; new AcceptHeaderLocaleResolver();</span><br><span class="line">			localeResolver.setDefaultLocale(this.mvcProperties.getLocale());</span><br><span class="line">			return localeResolver;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; 默认的是根据请求头带来的区域信息获取Locale进行国际化</span><br></pre></td></tr></table></figure></span>


</code></pre>
</li>
</ol>
</li>
</ol>
<pre><code>5. 点击链接切换国际化

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自己编写LocaleResolver</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocalcResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String l = request.getParameter(<span class="string">"l"</span>);</span><br><span class="line">        Locale locale=Locale.getDefault();</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(l))&#123;</span><br><span class="line">            String[] split = l.split(<span class="string">"_"</span>);</span><br><span class="line">            locale = <span class="keyword">new</span> Locale(split[<span class="number">0</span>], split[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加入容器中    </span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyLocalcResolver();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><h2 id="三、登录"><a href="#三、登录" class="headerlink" title="三、登录"></a>三、登录</h2><p>   开发期间模板引擎页面修改以后，要实时生效</p>
<ol>
<li><p>禁用模板引擎的缓存</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#禁用缓存</span></span><br><span class="line"><span class="meta">spring.thymeleaf.cache</span> = <span class="string">false</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="2">
<li>页面修改完成以后ctrl+f9 重新编译</li>
</ol>
<p>   登录错误消息的显示</p>
   <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;msg&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;not #strings.isEmpty(msg)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="四、拦截器"><a href="#四、拦截器" class="headerlink" title="四、拦截器"></a>四、拦截器</h2><p>   配置拦截器</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object loginUser = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        System.out.println(loginUser);</span><br><span class="line">        <span class="keyword">if</span>(loginUser== <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//错误提示</span></span><br><span class="line">            request.setAttribute(<span class="string">"mag"</span>,<span class="string">"没有权限"</span>);</span><br><span class="line">            <span class="comment">//未登录，返回登录页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.html"</span>).forward(request, response);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>   将拦截器加入容器</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> MyLocaleResolver()).addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">            .excludePathPatterns(<span class="string">"/login.html"</span>,<span class="string">"/"</span>,<span class="string">"/user/login"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="五-CRUD-员工列表"><a href="#五-CRUD-员工列表" class="headerlink" title="五 CRUD-员工列表"></a>五 CRUD-员工列表</h2><h3 id="1、"><a href="#1、" class="headerlink" title="1、"></a>1、</h3><table>
<thead>
<tr>
<th></th>
<th>普通CRUD（uri来区分操作）</th>
<th>RestfulCRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp–GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp？xxx</td>
<td>emp–POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}–PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}–DELETE</td>
</tr>
</tbody></table>
<h3 id="2、实验请求架构"><a href="#2、实验请求架构" class="headerlink" title="2、实验请求架构"></a>2、实验请求架构</h3><table>
<thead>
<tr>
<th></th>
<th>请求URI</th>
<th>请求方式</th>
</tr>
</thead>
<tbody><tr>
<td>查询所有员工</td>
<td>emps</td>
<td>GET</td>
</tr>
<tr>
<td>查询某个员工（来到修改页面）</td>
<td>emp/</td>
<td>GET</td>
</tr>
<tr>
<td>来到添加页面</td>
<td>emp</td>
<td>GET</td>
</tr>
<tr>
<td>添加员工</td>
<td>emp</td>
<td>POST</td>
</tr>
<tr>
<td>来到修改页面（查出员工进行信息回显）</td>
<td>emp/</td>
<td>GET</td>
</tr>
<tr>
<td>修改员工</td>
<td>emp</td>
<td>PUT</td>
</tr>
<tr>
<td>删除员工</td>
<td>emp/</td>
<td>DELETE</td>
</tr>
</tbody></table>
<h3 id="3、员工列表"><a href="#3、员工列表" class="headerlink" title="3、员工列表"></a>3、员工列表</h3><p>thymeleaf公共页面元素抽取</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0"</span> <span class="attr">th:fragment</span>=<span class="string">"topbar"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand col-sm-3 col-md-2 mr-0"</span> <span class="attr">href</span>=<span class="string">"http://getbootstrap.com/docs/4.0/examples/dashboard/#"</span>&gt;</span>[[$&#123;session.loginUser&#125;]]<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control form-control-dark w-100"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span> <span class="attr">aria-label</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar-nav px-3"</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item text-nowrap"</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"http://getbootstrap.com/docs/4.0/examples/dashboard/#"</span>&gt;</span>Sign out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>引入公共片段</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--模板名：会使用thymeleaf的前后缀配置规则进行解析--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;dashboard::topbar&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>默认效果：</p>
<p>insert的功能片段在div标签中</p>
<p>如果使用th:insert等属性进行引入，可以不用写~{}</p>
<p>行内写法可以加上：[[<del>{}]]   [(</del>{})]</p>
<p><code>三种引入功能片段的th属性：</code></p>
<p>*<em>th:insert *</em>：将公共片段整个插入到声明引入的元素中</p>
<p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p>
<p><strong>th:includ</strong>：将被引入的片段的内容包含进这个标签中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">th:fragment</span>=<span class="string">"copy"</span>&gt;</span> </span><br><span class="line">    <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery </span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line">引入方式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:include</span>=<span class="string">"footer :: copy"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">效果</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>    </span><br><span class="line">     <span class="tag">&lt;<span class="name">footer</span>&gt;</span>      </span><br><span class="line">         <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery    </span><br><span class="line">     <span class="tag">&lt;/<span class="name">footer</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>   </span><br><span class="line">      <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery  </span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>    </span><br><span class="line">      <span class="symbol">&amp;copy;</span> 2011 The Good Thymes Virtual Grocery  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="六-增加员工"><a href="#六-增加员工" class="headerlink" title="六 增加员工"></a>六 增加员工</h3><p>容易出现的问题</p>
<p>提交的数据格式不对：生日，日期</p>
<p>2017-12-12；2017/12/12；2017.12.12；</p>
<p>日期的格式化：SpringMVC将页面提交的值需要转换为指定的类型；</p>
<p>2017-12-12—-Date；类型转换，格式化</p>
<p>默认日期是按照/的方式</p>
<h1 id="8、错误处理机制"><a href="#8、错误处理机制" class="headerlink" title="8、错误处理机制"></a>8、错误处理机制</h1><h2 id="1、-springBoot默认的错误处理机制"><a href="#1、-springBoot默认的错误处理机制" class="headerlink" title="1、 springBoot默认的错误处理机制"></a>1、 springBoot默认的错误处理机制</h2><ol>
<li><p>浏览器默认返回一个错误页面</p>
</li>
<li><p>如果是其他客户端，默认响应一个json数据</p>
</li>
</ol>
<p>原理：</p>
<p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置</p>
<p>​    给容器中添加了以下组件</p>
<ol>
<li><p>DefaultErrorAttributes</p>
</li>
<li><p>BasicErrorController  ：处理默认/error请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(produces = MediaType.TEXT_HTML_VALUE)<span class="comment">//产生的html类型的数据；浏览器发送的请求来到这个方法处理</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		Map&lt;String, Object&gt; model = Collections</span><br><span class="line">				.unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));</span><br><span class="line">		response.setStatus(status.value());</span><br><span class="line">        <span class="comment">//去哪个页面作为错误页面，包含页面的地址和页面内容</span></span><br><span class="line">		ModelAndView modelAndView = resolveErrorView(request, response, status, model);</span><br><span class="line">		<span class="keyword">return</span> (modelAndView != <span class="keyword">null</span>) ? modelAndView : <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@RequestMapping</span> <span class="comment">//产生json数据，其他客户端来到这个方法处理</span></span><br><span class="line">	<span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">		HttpStatus status = getStatus(request);</span><br><span class="line">		<span class="keyword">if</span> (status == HttpStatus.NO_CONTENT) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(status);</span><br><span class="line">		&#125;</span><br><span class="line">		Map&lt;String, Object&gt; body = getErrorAttributes(request, isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(body, status);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="3">
<li><p>ErrorPageCustomizer ：系统出现错误以后来到error请求进行处理，相当于web.xml注册的错误页面规则</p>
</li>
<li><p>DefaultErrorViewResolver</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">		ModelAndView modelAndView = resolve(String.valueOf(status.value()), model);</span><br><span class="line">		<span class="keyword">if</span> (modelAndView == <span class="keyword">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series())) &#123;</span><br><span class="line">			modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> modelAndView;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> ModelAndView <span class="title">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//默认springBoot可以去找到一个页面 error/xxx</span></span><br><span class="line">        String errorViewName = <span class="string">"error/"</span> + viewName;</span><br><span class="line">        <span class="comment">//模板引擎可以解析这个页面地址就用模板引擎解析</span></span><br><span class="line">		TemplateAvailabilityProvider provider = <span class="keyword">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">				<span class="keyword">this</span>.applicationContext);</span><br><span class="line">		<span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//模板引擎可用的情况下返回到errorViewName指定的视图地址</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(errorViewName, model);</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面 error/xxx.html</span></span><br><span class="line">		<span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





</li>
</ol>
<p>步骤：</p>
<p>一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer 就会生效（定制错误的响应规则）；就会来到/error请求，就会被BasicErrorController  处理。</p>
<ol>
<li><p>响应页面；去哪个页面是由DefaultErrorViewResolver解析得到的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">		Map&lt;String, Object&gt; model)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//所有的ErrorViewResolver得到ModelAndView</span></span><br><span class="line">	<span class="keyword">for</span> (ErrorViewResolver resolver : <span class="keyword">this</span>.errorViewResolvers) &#123;</span><br><span class="line">		ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);</span><br><span class="line">		<span class="keyword">if</span> (modelAndView != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> modelAndView;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="2、如何定制错误响应"><a href="#2、如何定制错误响应" class="headerlink" title="2、如何定制错误响应"></a>2、如何定制错误响应</h2><ol>
<li><p>如何定制错误的页面</p>
<ol>
<li>有模板引擎的情况下；error/状态码【将错误页面命名为 错误状态码.html 放在模板引擎文件夹里面的error文件夹下】，发生此状态码的错误就会来到对应的页面<ol>
<li>我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）</li>
<li>页面能获取的信息<ol>
<li>timestamp    时间戳</li>
<li>status  状态码</li>
<li>error  错误提示</li>
<li>exception  异常对象</li>
<li>message   异常消息</li>
<li>errors  jsr303数据校验的错误</li>
</ol>
</li>
</ol>
</li>
<li>没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找</li>
<li>以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面</li>
</ol>
</li>
<li><p>如何定制错误的json数据</p>
<ol>
<li><p>自定义异常处理&amp;返回定制的json数据；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//浏览器和客户端返回的都是json数据</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span>  <span class="title">Map</span>&lt;<span class="title">String</span>,<span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="string">"user notexist"</span>);</span><br><span class="line">        map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有自适应效果</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>转发到/error进行自适应效果处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span>  <span class="title">String</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>)</span>&#123;</span><br><span class="line">  Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  <span class="comment">//传入自己的错误状态码 4xx 5xx</span></span><br><span class="line">  request.setAttribute(<span class="string">"javax.servlet.error.statue_code"</span>,<span class="number">400</span>);</span><br><span class="line">  map.put(<span class="string">"code"</span>, <span class="string">"user notexist"</span>);</span><br><span class="line">  map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将我们的定制数据携带出去</p>
<p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获得的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p>
<ol>
<li><p>完全编写一个ErrorController的实现类【或者编写AbstractErrorController的子类】，放在容器中</p>
</li>
<li><p>页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到</p>
<p>容器中DefaultErrorAttributes.getErrorAttributes();默认进行数据处理的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给容器中加入我们自定义的ErrorAttributes</span></span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyErrorattributes</span> <span class="keyword">extends</span> <span class="title">DefaultErrorAttributes</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回值的map就是页面和json能获取的所有字段</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(WebRequest webRequest, <span class="keyword">boolean</span> includeStackTrace)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; errorAttributes = <span class="keyword">super</span>.getErrorAttributes(webRequest, includeStackTrace);</span><br><span class="line">         errorAttributes.put(<span class="string">"mingzi"</span>, <span class="string">"zhaoning"</span>);</span><br><span class="line">         <span class="comment">//我们的异常处理器携带的数据</span></span><br><span class="line">        Map&lt;String,Object&gt; ext = (Map&lt;String, Object&gt;) webRequest.getAttribute(<span class="string">"ext"</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">//errorAttributes.put("ext",ext);</span></span><br><span class="line">        <span class="keyword">return</span> errorAttributes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@ExceptionHandler</span>(UserNotExistException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span>  <span class="title">String</span> <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletRequest</span> <span class="title">request</span>)</span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//传入自己的错误状态码 4xx 5xx</span></span><br><span class="line">    request.setAttribute(<span class="string">"javax.servlet.error.statue_code"</span>,<span class="number">400</span>);</span><br><span class="line">    map.put(<span class="string">"code"</span>, <span class="string">"user notexist"</span>);</span><br><span class="line">    map.put(<span class="string">"message"</span>, e.getMessage());</span><br><span class="line">    request.setAttribute(<span class="string">"ext"</span>,map);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"forward:/error"</span>;</span><br><span class="line">         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
</ol>
</li>
</ol>
</li>
</ol>
<h1 id="9、配置嵌入式Servlet容器"><a href="#9、配置嵌入式Servlet容器" class="headerlink" title="9、配置嵌入式Servlet容器"></a>9、配置嵌入式Servlet容器</h1><p>Springboot默认使用Tomcat作为嵌入式的Servlet容器</p>
<p>问题：</p>
<h2 id="1、如何定制和修改servlet容器的相关配置"><a href="#1、如何定制和修改servlet容器的相关配置" class="headerlink" title="1、如何定制和修改servlet容器的相关配置"></a>1、如何定制和修改servlet容器的相关配置</h2><ol>
<li><p>修改和server有关的配置（ServerProperties）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="meta">server.context-path</span>=<span class="string">/crud</span></span><br><span class="line"></span><br><span class="line"><span class="meta">sercer.tomcat.uri-encoding</span>=<span class="string">UTF-8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">//通用的Servlet容器设置</span></span><br><span class="line"><span class="attr">server.xxx</span></span><br><span class="line"><span class="attr">//Tomcat的配置</span></span><br><span class="line"><span class="attr">server.tomcat.xxx</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写一个EmbeddedServletContainerCustomizer：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p>
</li>
</ol>
<h2 id="2、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2、注册Servlet三大组件【Servlet、Filter、Listener】</h2><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件</p>
<p>注册三大组件用以下方式</p>
<ol>
<li><p>ServletRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServletConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//注册三大组件</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">myServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;Servlet&gt; servletServletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> MyServlet(),<span class="string">"/myservlet"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> servletServletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>FilterRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">myFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FilterRegistrationBean&lt;Filter&gt; filterFilterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">    filterFilterRegistrationBean.setFilter(<span class="keyword">new</span> MyFilter());</span><br><span class="line">    filterFilterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/myservlet"</span>));</span><br><span class="line">    <span class="keyword">return</span> filterFilterRegistrationBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>ServletListenerRegistrationBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletListenerRegistrationBean <span class="title">myListener</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ServletListenerRegistrationBean&lt;MyListener&gt; myListenerServletRegistrationBean = <span class="keyword">new</span> ServletListenerRegistrationBean&lt;MyListener&gt;(<span class="keyword">new</span> MyListener());</span><br><span class="line">        <span class="keyword">return</span> myListenerServletRegistrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>SpringBoot帮我们自动配置SpringMVC的时候，自动的注册SpringMVC的前端控制器DispatcherServlet；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)</span><br><span class="line">	<span class="meta">@ConditionalOnBean</span>(value = DispatcherServlet<span class="class">.<span class="keyword">class</span>, <span class="title">name</span> </span>= DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)</span><br><span class="line">	<span class="function"><span class="keyword">public</span> DispatcherServletRegistrationBean <span class="title">dispatcherServletRegistration</span><span class="params">(DispatcherServlet dispatcherServlet,</span></span></span><br><span class="line"><span class="function"><span class="params">			WebMvcProperties webMvcProperties, ObjectProvider&lt;MultipartConfigElement&gt; multipartConfig)</span> </span>&#123;</span><br><span class="line">		DispatcherServletRegistrationBean registration = <span class="keyword">new</span> DispatcherServletRegistrationBean(dispatcherServlet,</span><br><span class="line">				webMvcProperties.getServlet().getPath());</span><br><span class="line">           <span class="comment">//默认拦截：/ 所有请求; 包括静态资源，但是不拦截jsp请求</span></span><br><span class="line">           <span class="comment">// /*拦截jsp请求</span></span><br><span class="line">           <span class="comment">//可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径</span></span><br><span class="line">		registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);</span><br><span class="line">		registration.setLoadOnStartup(webMvcProperties.getServlet().getLoadOnStartup());</span><br><span class="line">		multipartConfig.ifAvailable(registration::setMultipartConfig);</span><br><span class="line">		<span class="keyword">return</span> registration;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<h1 id="10Spring-Boot与数据访问"><a href="#10Spring-Boot与数据访问" class="headerlink" title="10Spring Boot与数据访问"></a>10Spring Boot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>连接数据库</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    username: root</span><br><span class="line">    password: tiger</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3308/mybatis?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure>

<p>操作数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCcontroller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接使用JdbcTemplate</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/userlist"</span>)</span><br><span class="line">    <span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; map()&#123;</span><br><span class="line">        String sql=<span class="string">"select * from user"</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">        System.out.println(<span class="string">"111"</span>);</span><br><span class="line">        <span class="keyword">return</span> maps;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>默认用 com.zaxxer.hikari.HikariDataSource作为数据源</p>
<p>.数据源的相关配置都在DataSourceProperties里面</p>
<p>自动配置</p>
<p>org.springframework.boot.autoconfigure.jdbc</p>
<ol>
<li><p>参考DataSourceConfiguration，根据配置创建数据源，配置文件中spring.datasouce.type指定自定义的数据源类型</p>
</li>
<li><p>SpringBoot默认支持</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.tomcat.jdbc.pool.DataSource</span><br><span class="line">HikariDataSource</span><br><span class="line">BasicDataSource</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(DataSource<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnProperty</span>(<span class="title">name</span> </span>= <span class="string">"spring.datasource.type"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">	<span class="meta">@Bean</span></span><br><span class="line">	<span class="function">DataSource <span class="title">dataSource</span><span class="params">(DataSourceProperties properties)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> properties.initializeDataSourceBuilder().build();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h2 id="2、整合Druid"><a href="#2、整合Druid" class="headerlink" title="2、整合Druid"></a>2、整合Druid</h2><ol>
<li><p>导入jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">tiger</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3308/mybatis?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">filters</span>: <span class="string">stat,wall</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写DruidConfigure</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//导入配置文件中的数据</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"spring.datasource"</span>)</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line">    <span class="comment">//1、配置一个管理后台的Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">staViewServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean&lt;&gt;(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>,<span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        initParams.put(<span class="string">"allow"</span>,<span class="string">"localhost"</span>);<span class="comment">//默认就是允许所有</span></span><br><span class="line">        servletRegistrationBean.setInitParameters(initParams);</span><br><span class="line">        <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2、配置一个监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean  <span class="title">webStatFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        filterRegistrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>,<span class="string">"*.js,*.css,/druid/*"</span>);</span><br><span class="line">        filterRegistrationBean.setInitParameters(initParams);</span><br><span class="line">        filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line">        <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>步骤：</p>
<p>​    1）、配置数据源相关属性（见上一节Druid）</p>
<p>​    2）、给数据库建表</p>
<p>​    3）、创建JavaBean</p>
<p>注解版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from department where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Options</span>(useGeneratedKeys = <span class="keyword">true</span>,keyProperty = <span class="string">"id"</span>)</span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into department(departmentName) values(#&#123;departmentName&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update department set departmentName=#&#123;departmentName&#125; where id=#&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：驼峰命名</p>
<p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；（注解版解决方案）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.context.annotation.Configuration</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConfigurationCustomizer <span class="title">configurationCustomizer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConfigurationCustomizer()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(Configuration configuration)</span> </span>&#123;</span><br><span class="line">                configuration.setMapUnderscoreToCamelCase(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">使用MapperScan批量扫描所有的Mapper接口；</span><br><span class="line"><span class="meta">@MapperScan</span>(value = <span class="string">"com.atguigu.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataMybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(SpringBoot06DataMybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mybatis:</span><br><span class="line">  config-location: classpath:mybatis/mybatis-config.xml 指定全局配置文件的位置</span><br><span class="line">  mapper-locations: classpath:mybatis/mapper<span class="comment">/*.xml  指定sql映射文件的位置</span></span><br></pre></td></tr></table></figure>

<h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><p>1）、SpringData简介</p>
<h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p>
<p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span> <span class="comment">//告诉JPA这是一个实体类（和数据表映射的类）</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"tbl_user"</span>) <span class="comment">//@Table来指定和哪个数据表对应;如果省略默认表名就是user；</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//这是一个主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)<span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>,length = <span class="number">50</span>) <span class="comment">//这是和数据表对应的一个列</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//省略默认列名就是属性名</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>

<p>2)、编写一个Dao接口来操作实体类对应的数据表（Repository）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承JpaRepository来完成对数据库的操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3)、基本的配置JpaProperties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:  <span class="string"></span></span><br><span class="line"> <span class="attr">jpa</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">hibernate</span>:<span class="string"></span></span><br><span class="line"><span class="comment">#     更新或者创建数据表结构</span></span><br><span class="line">      <span class="meta">ddl-auto</span>: <span class="string">update</span></span><br><span class="line"><span class="comment">#    控制台显示SQL</span></span><br><span class="line">    <span class="meta">show-sql</span>: <span class="string">true</span></span><br></pre></td></tr></table></figure>



<h1 id="11、缓存"><a href="#11、缓存" class="headerlink" title="11、缓存"></a>11、缓存</h1><p><img src="/2020/04/27/SpringBoot/%E7%BC%93%E5%AD%98.png" alt></p>
<table>
<thead>
<tr>
<th>Cache</th>
<th>缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache等</th>
</tr>
</thead>
<tbody><tr>
<td>CacheManager</td>
<td>缓存管理器，管理各种缓存（Cache）组件</td>
</tr>
<tr>
<td>@Cacheable</td>
<td>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</td>
</tr>
<tr>
<td>@CacheEvict</td>
<td>清空缓存</td>
</tr>
<tr>
<td>@CachePut</td>
<td>保证方法被调用，又希望结果被缓存</td>
</tr>
<tr>
<td>@EnableCaching</td>
<td>开启基于注解的缓存</td>
</tr>
<tr>
<td>keyGenerator</td>
<td>缓存数据时key生成策略</td>
</tr>
<tr>
<td>serialize</td>
<td>缓存数据时value序列化策略</td>
</tr>
</tbody></table>
<p>开启缓存</p>
<p>步骤：</p>
<ol>
<li>开启基于注解的缓存@EnableCaching，放在主函数上</li>
<li>标注缓存注解即可，在service层</li>
</ol>
<ol>
<li><h3 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h3><p>将方法的运行结果进行缓存，以后再要相同的数据，直接从缓存中获取，不用调用方法</p>
<p>几个属性</p>
<ul>
<li><p>cacheNames/value：指定缓存组件的名字；将方法的返回结果放在那个缓存中，是数组的方式</p>
<p>CacheManager管理多个Cache组件，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一的名字</p>
</li>
<li><p>key：缓存数据使用的key，可以用它来指定。默认是使用方法参数的值</p>
<p>支持SpEL：#id;参数id的值   #a0  #p0   #root.args[0]</p>
<img src="/2020/04/27/SpringBoot/笔记截图\springboot\key中的EL表达式.png" alt="key中的EL表达式" style="zoom:50%;">
</li>
<li><p>keyGenerator：key的生成器，可以自己指定key的生成器的组件id</p>
<p>key/keyGenerator：二选一使用</p>
</li>
<li><p>cachemanager：指定缓存管理器，或者cacheResolver指定获取解析器 </p>
</li>
<li><p>condition：指定符合条件的情况下才缓存</p>
</li>
<li><p>unless：否定缓存，当unless指定的条件为true，方法的返回值就不会被缓存，可以获取到结果进行判断</p>
<p>unless = “#result == null”  当结果不为空时，进行缓存</p>
</li>
<li><p>sync：是否使用异步模式</p>
</li>
</ul>
<p><img src="/2020/04/27/SpringBoot/%E7%BC%93%E5%AD%98key.png" alt></p>
<p>原理：</p>
<ol>
<li>自动配置类：CacheAutoConfiguration</li>
<li>缓存的配置类</li>
<li>那个配置类默认生效：SimpleCacheConfiguration</li>
<li>SimpleCacheConfiguration   给容器中注册了一个CacheManager：ConcurrentMapCacheManager</li>
<li>ConcurrentMapCacheManager  可以获取和创建ConcurrentMapCache类型的缓存组件，他的作用将数据保存在ConcurrentMap中</li>
</ol>
<p>运行流程：</p>
<ol>
<li><p>方法运行之前，先去查Cache（缓存组件），按照cacheNames指定名字获取</p>
<p>（CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。</p>
</li>
<li><p>去Cache中查找缓存的内容，使用一个key，默认就是方法的参数</p>
<p>key是按照某种策略生成的，默认是使用keyGenerator生成的，默认使用SimpleKeyGenerator生成key</p>
<p>SimpleKeyGenerator生成key的默认策略</p>
<ul>
<li>如果没有参数，key=new SimpleKey()</li>
</ul>
</li>
</ol>
<ul>
<li>如果有一个参数，key=参数的值<ul>
<li>如果有多个参数，key=new SimpleKey(params)</li>
</ul>
</li>
</ul>
<ol start="3">
<li><p>没有查到缓存就调用目标方法</p>
</li>
<li><p>将目标方法返回的结果，放进缓存中</p>
</li>
</ol>
<p>总结：@Cacheable标注的方法执行之前，先来检查缓存中有没有这个数据，默认按照参数的值作为key去查询缓存，</p>
<p>​            如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据</p>
<p>核心：</p>
<ol>
<li>使用CacheManager（默认ConcurrentMapCacheManager）按照名字得到Cache（默认ConcurrentMapCache）组件</li>
<li>key使用keyGenerator生成的，默认是SimpleKeyGenerator</li>
</ol>
</li>
<li><h3 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h3><p>既调用方法，又更新缓存数据，同步更新缓存</p>
<p>修改了数据库的某个数据，同时更新缓存</p>
<p>运行时机：</p>
<ol>
<li>先调用目标方法</li>
<li>将目标方法的结果缓存起来</li>
</ol>
<p>测试步骤：</p>
<ol>
<li><p>查询1号员工；查到的结果会放在缓存中</p>
<p>key：1 —- value：lastName：张三</p>
</li>
<li><p>以后查询还是之前的结果</p>
</li>
<li><p>更新1号员工</p>
<p>将方法的返回值也放进了缓存</p>
<p>key：传入的employee对象—value：返回的employee对象</p>
</li>
<li><p>查询1号员工</p>
<p>应该是更新后的员工，但是却不是，因为存入缓存的key不同</p>
<p>解决：</p>
<p>​    key=”#employee.id”：使用传入的参数的员工id</p>
<p>​    或者key =”#result.id”：使用返回后的id</p>
</li>
</ol>
</li>
</ol>
<ol start="3">
<li><h3 id="CacheEvict：缓存清除"><a href="#CacheEvict：缓存清除" class="headerlink" title="@CacheEvict：缓存清除"></a>@CacheEvict：缓存清除</h3><p>key：指定要清除的缓存</p>
<p>allEntries=true：指定清除这个缓存中所有的数据</p>
<p>beforeInvocation=false ：缓存的清除是否在方法之前执行</p>
<p>​    默认代表缓存清除操作是在方法执行之后执行，如果方法出现异常，缓存就不会清除</p>
<p>beforeInvocation=true</p>
<p>​    代表缓存清除操作是在方法执行之前执行，只要调用该方法，就会清除缓存</p>
</li>
</ol>
<ol start="4">
<li><h3 id="Caching：定义复杂的缓存规则"><a href="#Caching：定义复杂的缓存规则" class="headerlink" title="@Caching：定义复杂的缓存规则"></a>@Caching：定义复杂的缓存规则</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Caching</span>(</span><br><span class="line">	cacheable=&#123;</span><br><span class="line">        <span class="meta">@Cacheable</span>(value=<span class="string">"emp"</span>,key=<span class="string">"#lastName"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    put=&#123;</span><br><span class="line">        <span class="meta">@CachePut</span>(value=<span class="string">"emp"</span>,key=<span class="string">"#result.id"</span>),</span><br><span class="line">        <span class="meta">@CachePut</span>(value=<span class="string">"emp"</span>,key=<span class="string">"#result.email"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<ol start="5">
<li><h3 id="CacheConfig-cacheNames-”emp”-：抽取缓存的公共配置"><a href="#CacheConfig-cacheNames-”emp”-：抽取缓存的公共配置" class="headerlink" title="@CacheConfig(cacheNames=”emp”)：抽取缓存的公共配置"></a>@CacheConfig(cacheNames=”emp”)：抽取缓存的公共配置</h3><p>SpringBoot默认使用的是ConcurrentMapCacheManager，可以获取和创建ConcurrentMapCache类型的缓存组件，他的作用将数据保存在ConcurrentMap中</p>
<p>在开发中使用缓存中间件：redis memcached  ehcache|</p>
</li>
</ol>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>引入图片审核</title>
    <url>/2020/11/11/%E5%BC%95%E5%85%A5%E5%9B%BE%E7%89%87%E5%AE%A1%E6%A0%B8/</url>
    <content><![CDATA[<h1 id="接入百度智能云实现内容审核"><a href="#接入百度智能云实现内容审核" class="headerlink" title="接入百度智能云实现内容审核"></a>接入百度智能云实现内容审核</h1><h2 id="请求限制"><a href="#请求限制" class="headerlink" title="请求限制"></a>请求限制</h2><p>请求图像需经过<code>base64编码</code>：图像的base64编码指将一副图像数据编码成一串字符串，使用该字符串代替图像地址。您可以首先得到图像的二进制，然后用Base64格式编码即可。</p>
<p><strong>注意</strong>：图像的base64编码是不包含图像头的，如<code>（data:image/jpg;base64,）</code></p>
<p><strong>请求格式支持</strong>：PNG、JPG、JPEG、BMP、GIF（仅对首帧进行审核）、Webp、TIFF</p>
<p><strong>图像大小支持</strong>：图像要求base64后大于等于5kb，小于等于4M，最短边大于等于128像素，小于等于4096像素</p>
<h2 id="调用方式一"><a href="#调用方式一" class="headerlink" title="调用方式一"></a>调用方式一</h2><p><strong>请求URL数据格式</strong></p>
<p>向API服务地址使用POST发送请求，必须在URL中带上参数： <strong>access_token</strong> : 必须参数，参考“<a href="http://ai.baidu.com/docs#/Auth" target="_blank" rel="noopener">Access Token获取</a>”。</p>
<blockquote>
<p>注意：<code>access_token</code>的有效期为30天，需要每30天进行定期更换；</p>
</blockquote>
<h2 id="调用方式二"><a href="#调用方式二" class="headerlink" title="调用方式二"></a>调用方式二</h2><p><strong>请求头域内容</strong></p>
<p>在请求的HTTP头域中包含以下信息：</p>
<ul>
<li>host（必填）</li>
<li>x-bce-date （必填）</li>
<li>x-bce-request-id（选填）</li>
<li>authorization（必填）</li>
<li>content-type（必填）</li>
<li>content-length（选填）</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/rest/2.0/face/v1/detect</span> HTTP/1.1</span><br><span class="line"><span class="attribute">accept-encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">x-bce-date</span>: 2015-03-24T13:02:00Z</span><br><span class="line"><span class="attribute">connection</span>: keep-alive</span><br><span class="line"><span class="attribute">accept</span>: */*</span><br><span class="line"><span class="attribute">host</span>: aip.baidubce.com</span><br><span class="line"><span class="attribute">x-bce-request-id</span>: 73c4e74c-3101-4a00-bf44-fe246959c05e</span><br><span class="line"><span class="attribute">content-type</span>: application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">authorization</span>: bce-auth-v1/46bd9968a6194b4bbdf0341f2286ccce/2015-03-24T13:02:00Z/1800/host;x-bce-date/994014d96b0eb26578e039fa053a4f9003425da4bfedf33f4790882fb4c54903</span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>说明</strong>：方式二鉴权使用的<a href="https://cloud.baidu.com/doc/Reference/AuthenticationMechanism.html" target="_blank" rel="noopener">API认证机制</a>，authorization必须通过百度云的<a href="https://cloud.baidu.com/doc/Reference/GetAKSK.html" target="_blank" rel="noopener">AK/SK</a>生成。</p>
</blockquote>
<h2 id="调用内容审核平台-图像接口"><a href="#调用内容审核平台-图像接口" class="headerlink" title="调用内容审核平台-图像接口"></a>调用内容审核平台-图像接口</h2><p>内容审核平台-图像接口地址（调用服务）：</p>
<p><a href="https://aip.baidubce.com/rest/2.0/solution/v1/img_censor/v2/user_defined" target="_blank" rel="noopener">https://aip.baidubce.com/rest/2.0/solution/v1/img_censor/v2/user_defined</a></p>
<p>请求方式：POST<br>接口说明：内容审核图像API接口。</p>
<p><strong>注意</strong>：<br>Content-Type为<code>application/x-www-form-urlencoded</code>，然后通过<code>urlencode</code>格式化请求体。</p>
<p><strong>URL参数</strong></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">access_token</td>
<td align="center">通过API Key和Secret Key获取的access_token,参考“<a href="http://ai.baidu.com/docs#/Auth" target="_blank" rel="noopener">Access Token获取</a>”</td>
</tr>
</tbody></table>
<p><strong>Header</strong></p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Content-Type</td>
<td align="center">application/x-www-form-urlencoded</td>
</tr>
</tbody></table>
<p>Body中放置请求参数，参数详情如下：</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>数据类型</th>
<th>是否必须</th>
<th>备注</th>
<th>样例</th>
</tr>
</thead>
<tbody><tr>
<td>image</td>
<td>String</td>
<td>N （和imgUrl二选一）</td>
<td>待审核图像Base64编码字符串， 以图像文件形式请求时必填， 图像要求base64后 大于等于5kb，小于等于4M， 最短边大于等于128像素， 小于等于4096像素， 支持的图片格式：PNG、JPG、JPEG、BMP、GIF（仅对首帧进行审核）、Webp、TIFF</td>
<td>/9j/4AAQSkZJRgABAQ AASABIAAD/4QBYRXh pZgAATU0AKgAAAAgA AgESAAMAAAABAAYAAIdp</td>
</tr>
<tr>
<td>imgUrl</td>
<td>String</td>
<td>N （和image二选一）</td>
<td>图像URL地址， 以URL形式请求， 图像Url需要做UrlEncode， 图像要求base64后大于等于5kb， 小于等于4M， 最短边大于等于128像素， 小于等于4096像素 支持的图片格式：PNG、JPG、JPEG、BMP、GIF（仅对首帧进行审核）、Webp、TIFF</td>
<td><a href="https://ai-solution-admin.cdn.bcebos.com/audit%2Fdemo%2Fcensoring-demo.jpg" target="_blank" rel="noopener">https://ai-solution-admin.cdn.bcebos.com/audit%2Fdemo%2Fcensoring-demo.jpg</a></td>
</tr>
<tr>
<td>imgType</td>
<td>uint64</td>
<td>N</td>
<td>图片类型0:静态图片（PNG、JPG、JPEG、BMP、GIF（仅对首帧进行审核）、Webp、TIFF），1:GIF动态图片</td>
<td>0</td>
</tr>
</tbody></table>
]]></content>
  </entry>
</search>
